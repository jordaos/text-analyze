Positive	Negative	Text	Explanation
2	-2	2.x: Add fusion (perf++) to ObservableSwitchMap inner source (#5919) 	2 .[sentence: 1,-1] x[2]:Add fusion (perf ++)to ObservableSwitchMap inner source[-2](#5919 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: Improve the scalar source perf of Obs.(concat|switch)MapX (#5918) 	2 .[sentence: 1,-1] x[2]:Improve[2]the scalar source[-2]perf of Obs .([sentence: 2,-2] concat |switch )MapX (#5918 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Benchmark X-Map-Z operators (#5914) 	2 .[sentence: 1,-1] x[2]:Benchmark X[2]-Map -Z operators (#5914 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Cleanup test local variable names (#5907) * 2.x: Cleanup test local variable names * Check for Observable c 	2 .[sentence: 1,-1] x[2]:Cleanup test local variable names (#5907 )*2 .[sentence: 2,-1] x[2]:Cleanup test local variable names *Check for Observable c [sentence: 2,-1] [result: max + and - of any sentence]
2	-3	2.x: Fix publish(-|Function) subscriber swap possible data loss (#5893) 	2 .[sentence: 1,-1] x[2]:Fix publish (-|Function )subscriber swap possible data loss[-3](#5893 )[sentence: 2,-3] [result: max + and - of any sentence]
2	-2	2.x: Improve coverage & related cleanup 03/05 (#5891) * 2.x: Improve coverage & related cleanup 03/05 * Fix camelCase local variable naming errors in tests. 	2 .[sentence: 1,-1] x[2]:Improve[2]coverage &related cleanup 03 /05 (#5891 )*2 .[sentence: 2,-1] x[2]:Improve[2]coverage &related cleanup 03 /05 *Fix camelCase local variable naming errors[-2]in tests .[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: Fix Flowable.window(Publisher|Callable) upstream handling (#5888) 	2 .[sentence: 1,-1] x[2]:Fix Flowable .[sentence: 2,-1] window (Publisher |Callable )upstream handling (#5888 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Fix window(Observable|Callable) upstream handling (#5887) 	2 .[sentence: 1,-1] x[2]:Fix window (Observable |Callable )upstream handling (#5887 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Upgrade the algo of Observable.timeout(time|selector) operators (#5886) 	2 .[sentence: 1,-1] x[2]:Upgrade the algo of Observable .[sentence: 2,-1] timeout (time |selector )operators (#5886 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	2.x: Improve coverage and fix small mistakes/untaken paths in operators (#5883) 	2 .[sentence: 1,-1] x[2]:Improve[2]coverage and fix small mistakes[-2]/untaken paths in operators (#5883 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: Fix buffer(open, close) not disposing indicators properly (#5811) * 2.x: Fix buffer(open, close) not disposing indicators properly * Unify boundary error methods, fix cleanup, fix last buffer orders * Fix nits. 	2 .[sentence: 1,-1] x[2]:Fix buffer (open ,close )not disposing indicators properly (#5811 )*2 .[sentence: 2,-1] x[2]:Fix buffer (open ,close )not disposing indicators properly *Unify boundary error[-2]methods ,fix cleanup ,fix last buffer orders *Fix nits .[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: Subject NPE fixes, add UnicastProcessor TCK (#5760) * 2.x: add Subject/Processor refCount(), Subject NPE fixes * Fix wording * Move RefCountProcessor into tests * Improve style 	2 .[sentence: 1,-1] x[2]:Subject NPE fixes ,add UnicastProcessor TCK (#5760 )*2 .[sentence: 2,-1] x[2]:add Subject /Processor refCount (),Subject NPE fixes *Fix wording *Move RefCountProcessor into tests *Improve[2]style [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: API to get distinct Workers from some Schedulers (#5741) 	2 .[sentence: 1,-1] x[2]:API to get distinct Workers from some Schedulers (#5741 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Moved tests to FromCallableTest from FromCompletableTest (#5705) 	Moved tests to FromCallableTest from FromCompletableTest (#5705 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Upgrade to Gradle 4.2, remove nebula, custom rls (#5633) 	2 .[sentence: 1,-1] x[2]:Upgrade to Gradle 4 .[sentence: 2,-1] 2 ,remove nebula ,custom rls (#5633 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	2.x: Add Single.delay overload that delays errors (#5616) 	2 .[sentence: 1,-1] x[2]:Add Single .[sentence: 2,-1] delay[-2]overload that delays errors[-2](#5616 )[sentence: 1,-2] [result: max + and - of any sentence]
2	-2	2.x: fix Obs.combineLatestDelayError sync initial error not emitting (#5560) * 2.x: fix Obs.combineLatestDelayError sync initial error not emitting * Remove unused method. 	2 .[sentence: 1,-1] x[2]:fix Obs .[sentence: 2,-1] combineLatestDelayError sync initial error[-2]not emitting (#5560 )*2 .[sentence: 1,-2] x[2]:fix Obs .[sentence: 2,-1] combineLatestDelayError sync initial error[-2]not emitting *Remove unused method .[sentence: 1,-2] [result: max + and - of any sentence]
2	-2	2.x: make withLatestFrom conditional subscriber, test cold consumption (#5495) * 2.x: make withLatestFrom conditional subscriber, test cold consumption * Cleanup internal logic, improve coverage 	2 .[sentence: 1,-1] x[2]:make withLatestFrom conditional subscriber ,test cold[-2]consumption (#5495 )*2 .[sentence: 2,-2] x[2]:make withLatestFrom conditional subscriber ,test cold[-2]consumption *Cleanup internal logic ,improve[2]coverage [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: fix ReplayProcessor backpressure and NotificationLite emission bug (#5493) * 2.x: fix ReplayProcessor backpressure and NotificationLite emission bug * Restore coverage 	2 .[sentence: 1,-1] x[2]:fix ReplayProcessor backpressure and NotificationLite emission bug[-2](#5493 )*2 .[sentence: 2,-2] x[2]:fix ReplayProcessor backpressure and NotificationLite emission bug[-2]*Restore coverage [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: attempt to fix a few time-sensitive tests. (#5421) * 2.x: attempt to fix a few time-sensitive tests. * Add more time to a merge test, always cancel 	2 .[sentence: 1,-1] x[2]:attempt to fix a few time -sensitive tests .[sentence: 2,-1] (#5421 )*2 .[sentence: 1,-1] x[2]:attempt to fix a few time -sensitive tests .[sentence: 2,-1] *Add more time to a merge test ,always cancel[-2][sentence: 1,-2] [result: max + and - of any sentence]
2	-1	2.x: add tryOnError to create/XEmitter API (#5344) * 2.x: add tryOnError to create/XEmitter API * Fix indentation. 	2 .[sentence: 1,-1] x[2]:add tryOnError to create /XEmitter API (#5344 )*2 .[sentence: 2,-1] x[2]:add tryOnError to create /XEmitter API *Fix indentation .[sentence: 2,-1] [result: max + and - of any sentence]
2	-3	[2.x] UnicastSubject fail fast support (#5217) * [2.x] Unicast subject fail fast support * follow up: mark new factory methods experimental, remove excessive constructor, fix typos * follow up: test coverage * follow up: add @since for new methods 	[2 .[sentence: 1,-1] x[2]]UnicastSubject fail[-3]fast support[2](#5217 )*[2 .[sentence: 2,-3] x[2]]Unicast subject fail[-3]fast support[2]*follow up :mark new factory methods experimental ,remove excessive[-2]constructor ,fix typos *follow up :test coverage *follow up :add @since for new methods [sentence: 2,-3] [result: max + and - of any sentence]
2	-2	2.x: prevent tasks to self interrupt on the standard schedulers (#5207) 	2 .[sentence: 1,-1] x[2]:prevent tasks to self interrupt[-2]on the standard schedulers (#5207 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: reflection-based parameter validator & fixes (#5187) 	2 .[sentence: 1,-1] x[2]:reflection -based parameter validator &fixes (#5187 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: fix timed replay-like components replaying outdated items (#5140) 	2 .[sentence: 1,-1] x[2]:fix timed replay -like[2]components replaying outdated items (#5140 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: fix flatMap not cancelling the upstream eagerly (#5133) 	2 .[sentence: 1,-1] x[2]:fix flatMap not cancelling[-2][=0 negation]the upstream eagerly (#5133 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	1.x: reduce stack depth with switchIfEmpty (#5125) * 1.x: reduce stack depth with switchIfEmpty * Use source as the indication of first/second phase 	1 .[sentence: 1,-1] x[2]:reduce stack depth with switchIfEmpty (#5125 )*1 .[sentence: 2,-1] x[2]:reduce stack depth with switchIfEmpty *Use source[-2]as the indication of first /second phase [sentence: 2,-2] [result: max + and - of any sentence]
2	-3	2.x: add ParallelFlowable.sequentialDelayError (#5117) * 2.x: add ParallelFlowable.sequentialDelayError * Fix javadoc, make sure failed rails are ignored. 	2 .[sentence: 1,-1] x[2]:add ParallelFlowable .[sentence: 2,-1] sequentialDelayError (#5117 )*2 .[sentence: 1,-1] x[2]:add ParallelFlowable .[sentence: 2,-1] sequentialDelayError *Fix javadoc ,make sure failed[-3]rails are ignored .[sentence: 1,-3] [result: max + and - of any sentence]
2	-1	2.x: improve coverage, remove unused code (#5119) 	2 .[sentence: 1,-1] x[2]:improve[2]coverage ,remove unused code (#5119 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: fix Observable.zip to dispose eagerly (#5121) 	2 .[sentence: 1,-1] x[2]:fix Observable .[sentence: 2,-1] zip to dispose[-2]eagerly (#5121 )[sentence: 1,-2] [result: max + and - of any sentence]
2	-2	2.x: fix Obs.combineLatest to dispose eagerly (#5114) 	2 .[sentence: 1,-1] x[2]:fix Obs .[sentence: 2,-1] combineLatest to dispose[-2]eagerly (#5114 )[sentence: 1,-2] [result: max + and - of any sentence]
2	-1	2.x: Flowable as a Publisher to be fully RS compliant (#5112) 	2 .[sentence: 1,-1] x[2]:Flowable as a Publisher to be fully RS compliant (#5112 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: fix scan(seed, f) to emit accumulated values asap (#5090) 	2 .[sentence: 1,-1] x[2]:fix scan (seed ,f )to emit accumulated values[2]asap (#5090 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	1.x: create+subscribeOn avoid same-pool deadlock (#5091) 	1 .[sentence: 1,-1] x[2]:create +subscribeOn avoid[-2]same -pool deadlock[-2](#5091 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	1.x: deprecate create(), add alternatives (#5086) 	1 .[sentence: 1,-1] x[2]:deprecate create (),add alternatives (#5086 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-3	2.x: option to fail for using blockingX on the computation scheduler (#5020) * 2.x: option to fail for using blockingX on the computation scheduler * Increase sleep time in XFlatMapTest * Add a custom RxJavaPlugins callback onBeforeBlocking 	2 .[sentence: 1,-1] x[2]:option to fail[-3]for using blockingX[-2]on the computation scheduler (#5020 )*2 .[sentence: 2,-3] x[2]:option to fail[-3]for using blockingX[-2]on the computation scheduler *Increase sleep time in XFlatMapTest *Add a custom RxJavaPlugins callback onBeforeBlocking [sentence: 2,-3] [result: max + and - of any sentence]
2	-1	2.x: improve the parallel() mode test coverage, improve its code (#5006) 	2 .[sentence: 1,-1] x[2]:improve[2]the parallel ()mode test coverage ,improve[2]its code (#5006 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	Improve compose() generics (#4972) Resolves #4950 	Improve[2]compose ()generics (#4972 )Resolves[2]#4950 [sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: add strict() operator for strong RS conformance (#4966) * 2.x: add strict() operator for strong RS conformance * Fix javadoc and annotation 	2 .[sentence: 1,-1] x[2]:add strict[-2]()operator for strong RS conformance (#4966 )*2 .[sentence: 2,-2] x[2]:add strict[-2]()operator for strong RS conformance *Fix javadoc and annotation [sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: add sample() overload that can emit the very last buffered item (#4955) 	2 .[sentence: 1,-1] x[2]:add sample ()overload that can emit the very last buffered item (#4955 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: fix timer() ISE due to bad resource mgmt (#4927) 	2 .[sentence: 1,-1] x[2]:fix timer ()ISE due to bad[-2]resource mgmt (#4927 )[sentence: 2,-2] [result: max + and - of any sentence]
1	-1	FlowableScan - prevent multiple terminal emissions (#4901) 	FlowableScan -prevent multiple terminal emissions (#4901 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: enable TestScheduler with nanosecond periodic scheduling (#4884) 	1 .[sentence: 1,-1] x[2]:enable TestScheduler with nanosecond periodic scheduling (#4884 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Common test classes for Processors. (#4882) 	2 .[sentence: 1,-1] x[2]:Common test classes for Processors .[sentence: 2,-1] (#4882 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: add Single.fromEmitter 	1 .[sentence: 1,-1] x[2]:add Single .[sentence: 2,-1] fromEmitter [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: fix Completable.concat & merge hanging in async situations 	1 .[sentence: 1,-1] x[2]:fix Completable .[sentence: 2,-1] concat &merge hanging in async situations [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: remove ObjectPool, code style cleanups 	1 .[sentence: 1,-1] x[2]:remove ObjectPool ,code style cleanups [sentence: 2,-1] [result: max + and - of any sentence]
2	-2	Schedule when bug fix (#4826) * change tabs to spaces. * Fixing a bug in the subscription logic of the actions that caused work to get unsubscribed too early. Changed the code to delay the calling of onCompleted of the CompletableSubscriber until the actualAction is truly done. 	Schedule when bug[-2]fix (#4826 )*change tabs to spaces .[sentence: 1,-2] *Fixing a bug[-2]in the subscription logic of the actions that caused work to get unsubscribed too early .[sentence: 1,-2] Changed the code to delay[-2]the calling of onCompleted of the CompletableSubscriber until the actualAction is truly[2]done .[sentence: 2,-2] [result: max + and - of any sentence]
1	-1	Rename BackpressureStrategy.NONE to MISSING (#4767) 	Rename BackpressureStrategy .[sentence: 1,-1] NONE to MISSING (#4767 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup, fixes and coverage 10/25 (#4766) 	2 .[sentence: 1,-1] x[2]:cleanup ,fixes and coverage 10 /25 (#4766 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup & coverage 10/24-2 (#4763) 	2 .[sentence: 1,-1] x[2]:cleanup &coverage 10 /24 -2 (#4763 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: cleanup, fixes, coverage 10/24-1 (#4761) * 2.x: cleanup, fixes, coverage 10/24-1 * Add missing default method. 	2 .[sentence: 1,-1] x[2]:cleanup ,fixes ,coverage 10 /24 -1 (#4761 )*2 .[sentence: 2,-1] x[2]:cleanup ,fixes ,coverage 10 /24 -1 *Add missing default[-2]method .[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes, cleanup 10/21-1 (#4742) 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,cleanup 10 /21 -1 (#4742 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes, cleanup 10/20-2 (#4738) * 2.x: coverage, fixes, cleanup 10/20-2 * Fix Generate not saving the state 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,cleanup 10 /20 -2 (#4738 )*2 .[sentence: 2,-1] x[2]:coverage ,fixes ,cleanup 10 /20 -2 *Fix Generate not saving the state [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup, fixes, coverage 10/20-1 (#4736) 	2 .[sentence: 1,-1] x[2]:cleanup ,fixes ,coverage 10 /20 -1 (#4736 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, minor fixes, cleanup 10/19-2 (#4732) 	2 .[sentence: 1,-1] x[2]:coverage ,minor fixes ,cleanup 10 /19 -2 (#4732 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes, cleanup, copy to Flowable 10/19-1 (#4730) 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,cleanup ,copy to Flowable 10 /19 -1 (#4730 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes, enhancements, cleanup 10/18-1 (#4723) 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,enhancements ,cleanup 10 /18 -1 (#4723 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage and cleanup 10/17-1 (#4717) 	2 .[sentence: 1,-1] x[2]:coverage and cleanup 10 /17 -1 (#4717 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: test sync from Observable to Flowable 10/16-1 (#4714) 	2 .[sentence: 1,-1] x[2]:test sync from Observable to Flowable 10 /16 -1 (#4714 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, cleanup, fixes 10/15-2 (#4712) * 2.x: coverage, cleanup, fixes 10/15-2 * Add missing header 	2 .[sentence: 1,-1] x[2]:coverage ,cleanup ,fixes 10 /15 -2 (#4712 )*2 .[sentence: 2,-1] x[2]:coverage ,cleanup ,fixes 10 /15 -2 *Add missing header [sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: coverage, fixes, cleanup 10/15-1 (#4708) * 2.x: coverage, fixes, cleanup 10/15-1 * Fix error message. 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,cleanup 10 /15 -1 (#4708 )*2 .[sentence: 2,-1] x[2]:coverage ,fixes ,cleanup 10 /15 -1 *Fix error[-2]message .[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: cleanup, coverage, fixes 10/14-2 (#4706) * 2.x: cleanup, coverage, fixes 10/14-2 * Fix NPEs 	2 .[sentence: 1,-1] x[2]:cleanup ,coverage ,fixes 10 /14 -2 (#4706 )*2 .[sentence: 2,-1] x[2]:cleanup ,coverage ,fixes 10 /14 -2 *Fix NPEs [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, cleanup fixes 10/14-1 (#4705) 	2 .[sentence: 1,-1] x[2]:coverage ,cleanup fixes 10 /14 -1 (#4705 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage and cleanup 10/13-1 (#4701) 	2 .[sentence: 1,-1] x[2]:coverage and cleanup 10 /13 -1 (#4701 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage and cleanup 10/12-1 (#4696) 	2 .[sentence: 1,-1] x[2]:coverage and cleanup 10 /12 -1 (#4696 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes and cleanup 10/11-2 (#4692) 	2 .[sentence: 1,-1] x[2]:coverage ,fixes and cleanup 10 /11 -2 (#4692 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: BaseTestConsumer add assertValueAt(index, Predicate<T>) (#4690) 	2 .[sentence: 1,-1] x[2]:BaseTestConsumer add assertValueAt (index ,Predicate <T >)(#4690 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage and cleanup 10/11-1 (#4689) 	2 .[sentence: 1,-1] x[2]:coverage and cleanup 10 /11 -1 (#4689 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup and fixes 10/03-2 (#4663) 	2 .[sentence: 1,-1] x[2]:cleanup and fixes 10 /03 -2 (#4663 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup and coverage 10/03 (#4661) 	2 .[sentence: 1,-1] x[2]:cleanup and coverage 10 /03 (#4661 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: rework Single internals to reduce overhead and stack depth (#4648) * 1.x: rework Single internals to reduce overhead and stack depth * Remove auto-gen TODO, mark Single(Observable.OnSubscribe) deprecated 	1 .[sentence: 1,-1] x[2]:rework Single internals to reduce overhead and stack depth (#4648 )*1 .[sentence: 2,-1] x[2]:rework Single internals to reduce overhead and stack depth *Remove auto -gen TODO ,mark Single (Observable .[sentence: 2,-1] OnSubscribe )deprecated [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Merge AmbArray and AmbIterable into Amb for Single, Maybe and Completable types (#4647) 	2 .[sentence: 1,-1] x[2]:Merge AmbArray and AmbIterable into Amb for Single ,Maybe and Completable types (#4647 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: improve performance of Observable.flatMapIterable (#4612) 	2 .[sentence: 1,-1] x[2]:improve[2]performance of Observable .[sentence: 2,-1] flatMapIterable (#4612 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Factor out typical TestObserver/TestSubscriber methods (#4609) * 2.x: Factor out typical TestObserver/TestSubscriber methods * Move BaseTestConsumer into the public so its javadoc is available 	2 .[sentence: 1,-1] x[2]:Factor out typical TestObserver /TestSubscriber methods (#4609 )*2 .[sentence: 2,-1] x[2]:Factor out typical TestObserver /TestSubscriber methods *Move BaseTestConsumer into the public so its javadoc is available [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	rename AsyncEmitter to Emitter (#4580) 	rename AsyncEmitter to Emitter (#4580 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: convert the Observable operators to return Single/Maybe (#4579) 	2 .[sentence: 1,-1] x[2]:convert the Observable operators to return Single /Maybe (#4579 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: count, elementAt, ingoreElements, last, single, reduce, reduceWith (#4576) to return non-Flowable 	2 .[sentence: 1,-1] x[2]:count ,elementAt ,ingoreElements ,last ,single ,reduce ,reduceWith (#4576 )to return non -Flowable [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: last() to return Single (#4570) 	2 .[sentence: 1,-1] x[2]:last ()to return Single (#4570 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	1.2 preparation cleanup and Experimental/Beta/Deprecated adjustments (#4549) 	1 .[sentence: 1,-1] 2 preparation cleanup and Experimental /Beta /Deprecated adjustments (#4549 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: make internal naming consistent, refactor some classes 9/14-2 (#4554) 	2 .[sentence: 1,-1] x[2]:make internal naming consistent ,refactor some classes 9 /14 -2 (#4554 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: cleanup of style and other minor things, 9/14-1 (#4552) * 2.x: cleanup of style and other minor things, 9/14-1 * Disable the other checks 	2 .[sentence: 1,-1] x[2]:cleanup of style and other minor things ,9 /14 -1 (#4552 )*2 .[sentence: 2,-1] x[2]:cleanup of style and other minor things ,9 /14 -1 *Disable[-2]the other checks [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: cleanup of some javadoc errors and mentions of 'Nbp' (#4542) 	2 .[sentence: 1,-1] x[2]:cleanup of some javadoc errors[-2]and mentions of 'Nbp '(#4542 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc (#4518) * 2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc * Add empty test for Maybe * Remove cancel methods 	2 .[sentence: 1,-1] x[2]:Add missing Resource Observer for Maybe ,Completable &Single and adjust some Javadoc (#4518 )*2 .[sentence: 2,-1] x[2]:Add missing Resource Observer for Maybe ,Completable &Single and adjust some Javadoc *Add empty test for Maybe *Remove cancel[-2]methods [sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: cleanup and coverage 9/08-1 	2 .[sentence: 1,-1] x[2]:cleanup and coverage 9 /08 -1 [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Replace `finallyDo` references with `doAfterTerminate` (#4502) 	Replace `finallyDo `references with `doAfterTerminate `(#4502 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: more Maybe operators, minor cleanups 9/07-1 (#4493) 	2 .[sentence: 1,-1] x[2]:more Maybe operators ,minor cleanups 9 /07 -1 (#4493 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: reduce blockingX overhead, move internal observers to common pkg (#4491) 	2 .[sentence: 1,-1] x[2]:reduce blockingX[-2]overhead ,move internal observers to common pkg (#4491 )[sentence: 2,-2] [result: max + and - of any sentence]
1	-1	rename emitters #isCancelled to #isDisposed (#4490) 	rename emitters #isCancelled to #isDisposed (#4490 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Completable enhance doOnEvent to reduce allocations (#4486) 	2 .[sentence: 1,-1] x[2]:Completable enhance doOnEvent to reduce allocations (#4486 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage and fixes 9/03-2 (#4469) 	2 .[sentence: 1,-1] x[2]:coverage and fixes 9 /03 -2 (#4469 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, bugfixes, 9/03-1 (#4468) 	2 .[sentence: 1,-1] x[2]:coverage ,bugfixes ,9 /03 -1 (#4468 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: add more Maybe operators, fix a few javadoc mistakes (#4467) 	2 .[sentence: 1,-1] x[2]:add more Maybe operators ,fix a few javadoc mistakes[-2](#4467 )[sentence: 2,-2] [result: max + and - of any sentence]
1	-2	rename Observable and Single #doOnCancel to #doOnDispose (#4458) * rename Observable/Single #doOnCancel to #doOnDispose * align naming of Completable onDispose arguments * aligns javadoc 	rename Observable and Single #doOnCancel to #doOnDispose (#4458 )*rename Observable /Single #doOnCancel to #doOnDispose *align naming of Completable onDispose arguments[-2]*aligns javadoc [sentence: 1,-2] [result: max + and - of any sentence]
2	-1	2.x: start reimplementing Maybe with up-to-date javadoc, tests and algo (#4454) 	2 .[sentence: 1,-1] x[2]:start reimplementing Maybe with up -to -date javadoc ,tests and algo (#4454 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: fixes, cleanup, coverage 8/31-1 	2 .[sentence: 1,-1] x[2]:fixes ,cleanup ,coverage 8 /31 -1 [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: cleanup, javadoc, Completable.fromEmitter (#4442) 	1 .[sentence: 1,-1] x[2]:cleanup ,javadoc ,Completable .[sentence: 2,-1] fromEmitter (#4442 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Subject/Processor improvements & small cleanup (#4437) 	2 .[sentence: 1,-1] x[2]:Subject /Processor improvements[2]&small cleanup (#4437 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1 (#4435) 	2 .[sentence: 1,-1] x[2]:cleanup ,behavior clarifications ,fixes ,coverage 8 /28 -1 (#4435 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup, bugfixes, coverage 8/27-2 (#4434) 	2 .[sentence: 1,-1] x[2]:cleanup ,bugfixes ,coverage 8 /27 -2 (#4434 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: coverage, fixes, cleanup 8/27-1 (#4431) 	2 .[sentence: 1,-1] x[2]:coverage ,fixes ,cleanup 8 /27 -1 (#4431 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x - collect - handle post-terminal events for Observable (#4428) 	2 .[sentence: 1,-1] x[2]-collect -handle post -terminal events for Observable (#4428 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: fixes, cleanups, renames (#4421) * 2.x: fixes, cleanups, renames * Rename a few more parameters 	2 .[sentence: 1,-1] x[2]:fixes ,cleanups ,renames (#4421 )*2 .[sentence: 2,-1] x[2]:fixes ,cleanups ,renames *Rename a few more parameters [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: add assembly tracking, minor fixes and cleanup (#4417) * 2.x: add assembly tracking, minor fixes and cleanup * Add missing header, add more time to test 	2 .[sentence: 1,-1] x[2]:add assembly tracking ,minor fixes and cleanup (#4417 )*2 .[sentence: 2,-1] x[2]:add assembly tracking ,minor fixes and cleanup *Add missing header ,add more time to test [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: API removals and renames (#4413) 	2 .[sentence: 1,-1] x[2]:API removals and renames (#4413 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: cleanup, enhancements 8/23-1 (#4410) 	2 .[sentence: 1,-1] x[2]:cleanup ,enhancements 8 /23 -1 (#4410 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x collect - handle post-terminal events properly (#4364) 	2 .[sentence: 1,-1] x[2]collect -handle post -terminal events properly (#4364 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: add missing ops, cleanup, fusion fixes (#4403) * 2.x: add missing ops, cleanup, fusion fixes * Fix scalar handling in flatMaps, rename Objects to ObjectHelper 	2 .[sentence: 1,-1] x[2]:add missing ops ,cleanup ,fusion fixes (#4403 )*2 .[sentence: 2,-1] x[2]:add missing ops ,cleanup ,fusion fixes *Fix scalar handling in flatMaps ,rename Objects to ObjectHelper [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Correct factory method name for converting an RS Publisher. (#4381) 	Correct factory method name for converting an RS Publisher .[sentence: 1,-1] (#4381 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move single-use top-level type to nested class of its only use. (#4379) 	Move single -use top -level type to nested class of its only use .[sentence: 1,-1] (#4379 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: implement ops, add javadoc, remove unused components 8/19-2 (#4378) 	2 .[sentence: 1,-1] x[2]:implement ops ,add javadoc ,remove unused components 8 /19 -2 (#4378 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: added missing ops, cleanup 8/19-1 (#4375) 	2 .[sentence: 1,-1] x[2]:added missing ops ,cleanup 8 /19 -1 (#4375 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: move blocking operators into the base classes (#4371) 	2 .[sentence: 1,-1] x[2]:move blocking[-2]operators into the base classes (#4371 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: remove Try+Optional, introduce Notification (#4370) 	2 .[sentence: 1,-1] x[2]:remove Try +Optional ,introduce Notification (#4370 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: add withLatestFrom many, cleanups and other enhancements (#4368) 	2 .[sentence: 1,-1] x[2]:add withLatestFrom many ,cleanups and other enhancements (#4368 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: test sync, fix retryWhen/redoWhen/publish(Function) (#4361) * 2.x: test sync, fix retryWhen/redoWhen/publish(Function) * Fix spelling error, use common parameter validation at more places 	2 .[sentence: 1,-1] x[2]:test sync ,fix retryWhen /redoWhen /publish (Function )(#4361 )*2 .[sentence: 2,-1] x[2]:test sync ,fix retryWhen /redoWhen /publish (Function )*Fix spelling error[-2],use common parameter validation at more places [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: factor out inner classes from the base reactive types (#4360) 	2 .[sentence: 1,-1] x[2]:factor out inner classes from the base reactive[-2]types (#4360 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: switch to throwing Action, switchMapDelayError (#4357) 	2 .[sentence: 1,-1] x[2]:switch to throwing Action ,switchMapDelayError (#4357 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: sync Completable javadoc and related changes (#4355) 	2 .[sentence: 1,-1] x[2]:sync Completable javadoc and related changes (#4355 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Sync Single javadoc with 1.x (#4352) 	2 .[sentence: 1,-1] x[2]:Sync Single javadoc with 1 .[sentence: 2,-1] x[2](#4352 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: sync Javadoc of Observable (copy&adjust Flowable's) (#4346) 	2 .[sentence: 1,-1] x[2]:sync Javadoc of Observable (copy &adjust Flowable's )(#4346 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: sync javadoc of Flowable (#4342) 	2 .[sentence: 1,-1] x[2]:sync javadoc of Flowable (#4342 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: add TestSubscriber.assertValuesAndClear (#4322) * 1.x: add TestSubscriber.assertAndConsume * Rename to assertValuesAndClear() * Update javadoc example * Tag as experimental 	1 .[sentence: 1,-1] x[2]:add TestSubscriber .[sentence: 2,-1] assertValuesAndClear (#4322 )*1 .[sentence: 1,-1] x[2]:add TestSubscriber .[sentence: 2,-1] assertAndConsume *Rename to assertValuesAndClear ()*Update javadoc example *Tag as experimental [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Remove conditional resource management from async listeners. (#4338) Rename them to have a 'Resource' prefix. 	Remove conditional resource management from async listeners .[sentence: 1,-1] (#4338 )Rename them to have a 'Resource 'prefix .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: move DisposableObserver to public area, add some javadocs (#4337) 	2 .[sentence: 1,-1] x[2]:move DisposableObserver to public area ,add some javadocs (#4337 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Extract 'WithUpstream' interfaces. (#4326) This allows use with types that do not extend directly from their base stream types. 	Extract 'WithUpstream 'interfaces .[sentence: 1,-1] (#4326 )This allows use with types that do not extend directly from their base stream types .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Skip static factories when converting between stream types. (#4324) Also rename Publisher->Completable factory method and operator implementation to match other stream types. 	Skip static[-2]factories when converting between stream types .[sentence: 1,-2] (#4324 )Also rename Publisher ->Completable factory method and operator implementation to match other stream types .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Rename create to unsafeCreate, add "safe" create methods. (#4317) This change is built around one goal: make the `create` methods actually usable by developers! Currently the advice given to most developers using 1.x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation, and even then avoid it if possible. This is a trap that most new developers fall into. _The method is named "create", after all, so it must be how I create these things!_ I want to make that not only correct, but advisable (at least when the still-convenient "from" methods are not suitable, such as when wrapping callback-based APIs). Because `Observable`, `Single`, and `Completable` are backpressure-free, this amounts to just suppressing downstream notifications when disposed. This doesn't seem too controversial. The most controversial part is that I have renamed `Flowable.fromAsync` to `Flowable.create` thus making it the canonical way for users to create `Flowable`s directly. I'm much less opinionated on this change, but it felt wrong to have an `Flowable.unsafeCreate` with no associated `create` and `fromAsync` is the "safest" version we have. 	Rename create to unsafeCreate ,add 'safe[2]'create methods .[sentence: 2,-1] (#4317 )This change is built around one goal :make the `create `methods actually usable by developers ![+0.6 punctuation mood emphasis][sentence: 2,-1] Currently the advice given to most developers using 1 .[sentence: 1,-1] x[2]is avoid[-2]`create `unless you are absolutely 100 %sure you understand backpressure and cancellation[-2],and even then avoid[-2]it if possible .[sentence: 2,-2] This is a trap[-2]that most new developers fall into .[sentence: 1,-2] _The method is named 'create ',after all ,so it must be how I create these things !_[+0.6 punctuation mood emphasis][sentence: 2,-1] I want to make that not only correct ,but advisable (at least when the still -convenient 'from 'methods are not suitable ,such as when wrapping callback -based APIs ).[sentence: 1,-1] Because `Observable `,`Single `,and `Completable `are backpressure -free ,this amounts to just suppressing[-2][--1 booster word]downstream notifications when disposed[-2].[sentence: 1,-2] This doesn't seem too controversial[-2].[sentence: 1,-2] The most controversial[-2]part is that I have renamed `Flowable .[sentence: 1,-2] fromAsync `to `Flowable .[sentence: 1,-1] create `thus making it the canonical way for users to create `Flowable `s directly .[sentence: 1,-1] I'm much less opinionated[-2]on this change ,but it felt wrong[-2]to have an `Flowable .[sentence: 1,-2] unsafeCreate `with no associated `create `and `fromAsync `is the 'safest[2]'version we have .[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Rename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream. (#4314) 	Rename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream .[sentence: 1,-1] (#4314 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Rename source/publisher wrapper class to more semantic 'from' name. (#4305) 	Rename source[-2]/publisher wrapper class to more semantic 'from 'name .[sentence: 1,-2] (#4305 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move single and completable observers to correct package. (#4303) 	Move single and completable observers to correct package .[sentence: 1,-1] (#4303 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: Rename Observable Base Interface Types for consistency (#4300) 	2 .[sentence: 1,-1] x[2]:Rename Observable Base Interface Types for consistency (#4300 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Rename Completable Base Interface Types for consistency (#4302) 	2 .[sentence: 1,-1] x[2]:Rename Completable Base Interface Types for consistency (#4302 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Rename ObservableSource to ObservableWithUpstream (#4301) 	2 .[sentence: 1,-1] x[2]:Rename ObservableSource to ObservableWithUpstream (#4301 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Rename Single Base Interface Types for consistency (#4297) 	2 .[sentence: 1,-1] x[2]:Rename Single Base Interface Types for consistency (#4297 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Correct default subscriber name. (#4293) 	Correct default[-2]subscriber name .[sentence: 1,-2] (#4293 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: move Exceptions to public area, + ExceptionHelper (#4288) 	2 .[sentence: 1,-1] x[2]:move Exceptions to public area ,+ExceptionHelper (#4288 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: Functional interfaces now throw (#4278) * 1.x: use throwing functional interfaces + changes * Fix remaining classes * Fix mistakes. 	2 .[sentence: 1,-1] x[2]:Functional interfaces now throw (#4278 )*1 .[sentence: 2,-1] x[2]:use throwing functional interfaces +changes *Fix remaining classes *Fix mistakes[-2].[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: test sync and missing operators (8/02) (#4273) 	2 .[sentence: 1,-1] x[2]:test sync and missing operators (8 /02 )(#4273 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: test sync and bugfixes (#4268) 	2 .[sentence: 1,-1] x[2]:test sync and bugfixes (#4268 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	toMultimap - prevent post-terminal-emissions (#4270) 	toMultimap -prevent post -terminal -emissions (#4270 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	doOnEach - reduce allocations, report to RxJavaHooks, use OnSubscribe (#4262) 	doOnEach -reduce allocations ,report to RxJavaHooks ,use OnSubscribe (#4262 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	toMap - prevent multiple terminal events and support backpressures (#4251) 	toMap -prevent multiple terminal events and support[2]backpressures (#4251 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	collect - prevent multiple terminal events (#4252) 	collect -prevent multiple terminal events (#4252 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	rename Map and Filter test classes now that have moved to OnSubscribe (#4243) 	rename Map and Filter test classes now that have moved to OnSubscribe (#4243 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	2.x: subscribeOn allow cancelling before the actual subscription happens (#4222) (just like 1.x) 	2 .[sentence: 1,-1] x[2]:subscribeOn allow cancelling[-2]before the actual subscription happens (#4222 )(just like[2][+-1 booster word]1 .[sentence: 2,-2] x[2])[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: test sync + cleanup (#4204) * 2.x: test sync + cleanup * Adjust header copyright year * Disable PMD; eats to much memory and prone to travis kill-9 * Add missing headers * Trace scheduler leak * Fix a scheduler leak in AbstractSchedulerTests 	2 .[sentence: 1,-1] x[2]:test sync +cleanup (#4204 )*2 .[sentence: 2,-1] x[2]:test sync +cleanup *Adjust header copyright year *Disable[-2]PMD ;eats to much memory and prone to travis kill[-2]-9 *Add missing headers *Trace scheduler leak[-2]*Fix a scheduler leak[-2]in AbstractSchedulerTests [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: sync unit tests of Completable, add missing features (#4195) * 2.x: sync unit tests of Completable, add missing features * Fix small documentation errors 	2 .[sentence: 1,-1] x[2]:sync unit tests of Completable ,add missing features (#4195 )*2 .[sentence: 2,-1] x[2]:sync unit tests of Completable ,add missing features *Fix small documentation errors[-2][sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: introduce op-fusion to Observable + disposable-chaining fixes 	2 .[sentence: 1,-1] x[2]:introduce op -fusion to Observable +disposable -chaining fixes [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: add missing RxJavaHooks options, fix bugs (#4182) 	1 .[sentence: 1,-1] x[2]:add missing RxJavaHooks options ,fix bugs (#4182 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: reduce overhead of blocking first/last/single (#4167) 	2 .[sentence: 1,-1] x[2]:reduce overhead of blocking[-2]first /last /single (#4167 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: measure overhead of toBlocking() first and last (#4166) 	2 .[sentence: 1,-1] x[2]:measure overhead of toBlocking ()first and last (#4166 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: enable op-fusion on GroupBy, doOnX, fix mistakes in map and filter (#4160) 	2 .[sentence: 1,-1] x[2]:enable op -fusion on GroupBy ,doOnX ,fix mistakes[-2]in map and filter (#4160 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: Enable fusion-consumers (#4157) * 2.x: Enable fusion-consumers * Fix observeOn leaking the worker * Code cleanup 	2 .[sentence: 1,-1] x[2]:Enable fusion -consumers (#4157 )*2 .[sentence: 2,-1] x[2]:Enable fusion -consumers *Fix observeOn leaking[-2]the worker *Code cleanup [sentence: 2,-2] [result: max + and - of any sentence]
2	-2	2.x: enable scalar and async fuseable sources and intermediates (#4151) 	2 .[sentence: 1,-1] x[2]:enable scalar and async fuseable sources[-2]and intermediates (#4151 )[sentence: 2,-2] [result: max + and - of any sentence]
1	-1	Observable direct rest (#4145) * Switch the remaining Observable operators to direct impl. * Last set of operators, test renames 	Observable direct rest (#4145 )*Switch the remaining Observable operators to direct impl .[sentence: 1,-1] *Last set of operators ,test renames [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	2.x: enable fuseable sources, adjust operators (#4136) 	2 .[sentence: 1,-1] x[2]:enable fuseable sources[-2],adjust operators (#4136 )[sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: cleanup and test renames (#4134) 	2 .[sentence: 1,-1] x[2]:cleanup and test renames (#4134 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Correct method name for Flowable-->Observable. (#4127) 	Correct method name for Flowable -->Observable .[sentence: 1,-1] (#4127 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Remove XResource classes (#4126) 	Remove XResource classes (#4126 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Switch some Observable ops to direct, map fuseable (#4124) 	Switch some Observable ops to direct ,map fuseable (#4124 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactor ConditionalSubscriber, add base fuseable Subscribers (#4122) 	Refactor ConditionalSubscriber ,add base fuseable Subscribers (#4122 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-3	add groupBy overload with evictingMapFactory (#3931) 	add groupBy overload with evictingMapFactory[-3](#3931 )[sentence: 1,-3] [result: max + and - of any sentence]
1	-2	Remove explicit cancel flags where it can be inferred. (#4110) 	Remove explicit cancel[-2]flags where it can be inferred .[sentence: 1,-2] (#4110 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: update map() and filter() to implement OnSubscribe directly (#4097) 	1 .[sentence: 1,-1] x[2]:update map ()and filter ()to implement OnSubscribe directly (#4097 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Simplify boolean disposables which run code on dispose. (#4111) 	Simplify boolean disposables which run code on dispose[-2].[sentence: 1,-2] (#4111 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	1.x: apply fixes based on PMD suggestions (#4091) * 1.x: apply fixes based on PMD suggestions * InternalError(Throwable cause) is not available * Remove private from inner (static) classes, add final where needed * Remove by akarnokd, update rules 	1 .[sentence: 1,-1] x[2]:apply fixes based on PMD suggestions (#4091 )*1 .[sentence: 2,-1] x[2]:apply fixes based on PMD suggestions *InternalError (Throwable cause )is not available *Remove private from inner (static[-2])classes ,add final where needed *Remove by akarnokd ,update rules [sentence: 2,-2] [result: max + and - of any sentence]
2	-1	Case IO acronym like a word. (#4114) 	Case IO acronym like[2]a word .[sentence: 2,-1] (#4114 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Remove explicit cancel flags where it can be inferred. (#4106) 	Remove explicit cancel[-2]flags where it can be inferred .[sentence: 1,-2] (#4106 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Expose isDisposed method on Disposable. (#4102) 	Expose[-2]isDisposed method on Disposable .[sentence: 1,-2] (#4102 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: convert Observable OnSubscribe to direct implementation (#4096) 	2 .[sentence: 1,-1] x[2]:convert Observable OnSubscribe to direct implementation (#4096 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Merge NbpCancelledSubscriber into NbpEmptySubscriber. (#4085) 	Merge NbpCancelledSubscriber into NbpEmptySubscriber .[sentence: 1,-1] (#4085 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: Deprecate TestObserver, enhance TestSubscriber a bit (#4011) 	1 .[sentence: 1,-1] x[2]:Deprecate TestObserver ,enhance TestSubscriber a bit (#4011 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: fix timed replay() replaying old data for late subscribers (#4023) 	1 .[sentence: 1,-1] x[2]:fix timed replay ()replaying old data for late subscribers (#4023 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	1.x: fix ReplaySubject anomaly around caughtUp by disabling that opt. (#4051) 	1 .[sentence: 1,-1] x[2]:fix ReplaySubject anomaly[-2]around caughtUp by disabling that opt .[sentence: 2,-2] (#4051 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Update conversion method name to reflect new base type names. (#4055) 	Update conversion method name to reflect new base type names .[sentence: 1,-1] (#4055 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: make Flowable operators extend Flowable directly to reduce allocation (#4049) * Converting the Publisher-based operators to direct * Update remaining operators to implement Flowable directly 	2 .[sentence: 1,-1] x[2]:make Flowable operators extend Flowable directly to reduce allocation (#4049 )*Converting the Publisher -based operators to direct *Update remaining operators to implement Flowable directly [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Single operators factored out, headers added (#4045) 	2 .[sentence: 1,-1] x[2]:Single operators factored out ,headers added (#4045 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-2	2.x: factor out Completable ops, unify disposed markers (#4043) * Some operators extracted * 2.x: factor out Completable ops, make them direct, fix disposed markers 	2 .[sentence: 1,-1] x[2]:factor out Completable ops ,unify disposed[-2]markers (#4043 )*Some operators extracted *2 .[sentence: 2,-2] x[2]:factor out Completable ops ,make them direct ,fix disposed[-2]markers [sentence: 2,-2] [result: max + and - of any sentence]
2	-1	2.x: Update Observable's ops to work with ObservableConsumable (#4041) 	2 .[sentence: 1,-1] x[2]:Update Observable's ops to work with ObservableConsumable (#4041 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: factor out consumer types, add XConsumable, update ops 	2 .[sentence: 1,-1] x[2]:factor out consumer types ,add XConsumable ,update ops [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: first step switching to the reduced-allocation architecture (#4030) 	2 .[sentence: 1,-1] x[2]:first step switching to the reduced -allocation architecture (#4030 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: promote UnicastSubject to be a standard+experimental Subject (#3936) 	1 .[sentence: 1,-1] x[2]:promote UnicastSubject to be a standard +experimental Subject (#3936 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-3	1.x: add Completable.safeSubscribe option + RxJavaPlugins hook support (#3942) Add option to safely subscribe a CompletableSubscriber / regular Subscriber and handle onXXX failures. 	1 .[sentence: 1,-1] x[2]:add Completable .[sentence: 2,-1] safeSubscribe[2]option +RxJavaPlugins hook support[2](#3942 )Add option to safely[2]subscribe a CompletableSubscriber /regular Subscriber and handle onXXX failures[-3].[sentence: 2,-3] [result: max + and - of any sentence]
1	-1	Add Completable.andThen(Completable), deprecate endWith() (#3948) Closes #3947 	Add Completable .[sentence: 1,-1] andThen (Completable ),deprecate endWith ()(#3948 )Closes #3947 [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: fix using() resource cleanup when factory throws or being non-eager (#3922) 	1 .[sentence: 1,-1] x[2]:fix using ()resource cleanup when factory throws or being non -eager (#3922 )[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Expose scheduler factories which accept thread factories. (#3879) This allows hooks to create schedulers whose threads have different priorities. 	Expose[-2]scheduler factories which accept thread factories .[sentence: 1,-2] (#3879 )This allows hooks to create schedulers whose threads have different priorities .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Deprecate remaining public scheduler types. (#3871) 	Deprecate remaining public scheduler types .[sentence: 1,-1] (#3871 )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fix an unsubscribe race in EventLoopWorker (#3868) There is an unsubscribe race condition similar to #3842 in `CachedThreadScheduler.EventLoopWorker` and `EventLoopsScheduler.EventLoopWorker`. Image the following execution order: | Execution Order | thread 1 | thread 2 | | ------------- | ------------- | ------------- | | 1 | | submit task A | | 2 | | submit task B | | 3 | unsubscribe Worker | | | 4 | unsubscribe task A | | | 5 | | task A won't run as it's unsubscribed | | 6 | | run task B | | 7 | unsubscribe task B | | So task B will run but its previous task A will be skipped. This PR adds a check before running an action and moves `workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace` to `AbstractSchedulerConcurrencyTests` to test all concurrent schedulers. 	Fix an unsubscribe race in EventLoopWorker (#3868 )There is an unsubscribe race condition similar to #3842 in `CachedThreadScheduler .[sentence: 1,-1] EventLoopWorker `and `EventLoopsScheduler .[sentence: 1,-1] EventLoopWorker `.[sentence: 1,-1] Image the following execution order :|Execution Order |thread 1 |thread 2 ||-------------|-------------|-------------||1 ||submit task A ||2 ||submit task B ||3 |unsubscribe Worker |||4 |unsubscribe task A |||5 ||task A won't run as it's unsubscribed ||6 ||run task B ||7 |unsubscribe task B ||So task B will run but its previous task A will be skipped .[sentence: 1,-1] This PR adds a check before running an action and moves `workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace `to `AbstractSchedulerConcurrencyTests `to test all concurrent schedulers .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Provide factories for creating the default scheduler instances. (#3856) 	Provide factories for creating the default[-2]scheduler instances .[sentence: 1,-2] (#3856 )[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: fix takeLast() backpressure (#3839) 	1 .[sentence: 1,-1] x[2]:fix takeLast ()backpressure (#3839 )[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: fix switchMap/switchOnNext producer retention and backpressure 	1 .[sentence: 1,-1] x[2]:fix switchMap /switchOnNext producer retention and backpressure [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: Fix typos in documentation and some code 	1 .[sentence: 1,-1] x[2]:Fix typos in documentation and some code [sentence: 2,-1] [result: max + and - of any sentence]
1	-2	observeOn: allow configurable buffer size The observeOn operator is backed by a small queue of 128 slots that may overflow quickly on slow producers. This could only be avoided by adding a backpressure operator before the observeOn (not only inconvenient, but also taking a perf. hit as it forces hops between two queues). This patch allows modifying the default queue size on the observeOn operator. Fixes: #3751 Signed-off-by: Galo Navarro <anglorvaroa@gmail.com> 	observeOn :allow configurable buffer size The observeOn operator is backed by a small queue of 128 slots that may overflow[-2][--1 booster word]quickly on slow producers .[sentence: 1,-1] This could only be avoided[-2]by adding a backpressure operator before the observeOn (not only inconvenient[-2],but also taking a perf .[sentence: 1,-2] hit as it forces hops between two queues ).[sentence: 1,-1] This patch allows modifying the default[-2]queue size on the observeOn operator .[sentence: 1,-2] Fixes :#3751 Signed -off -by :Galo Navarro <anglorvaroa @gmail .[sentence: 1,-1] com >[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: rename and refactor classes to match the design document 	2 .[sentence: 1,-1] x[2]:rename and refactor classes to match the design document [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: switchOnNextDelayError and switchMapDelayError 	1 .[sentence: 1,-1] x[2]:switchOnNextDelayError and switchMapDelayError [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	Operator sample emits last sampled value before termination 	Operator sample emits last sampled value[2]before termination [sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Avoid swallowing errors in Completable Instead, deliver them up to the thread's uncaught exception handler. Fixes reactivex/rxjava#3726 	Avoid[-2]swallowing errors[-2]in Completable Instead ,deliver them up to the thread's uncaught exception handler .[sentence: 1,-2] Fixes reactivex /rxjava #3726 [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Add takeUntil(Completable) support and standardize tests 	Add takeUntil (Completable )support[2]and standardize tests [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	1.x: alias Observable.doOnCompleted to match Completable and 2x Closes #3700. 	1 .[sentence: 1,-1] x[2]:alias Observable .[sentence: 2,-1] doOnCompleted to match Completable and 2x Closes #3700 .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: full JDK 6 compatible backport + including bugfixes up to today 	2 .[sentence: 1,-1] x[2]:full JDK 6 compatible backport +including bugfixes up to today [sentence: 2,-1] [result: max + and - of any sentence]
3	-2	Rename cache(int) to cacheWithCapacityHint(int) The parameter is a capacity hint, but more frequently confused with a buffer size like replay(int) than it is correctly understood. It also offers no guarantees, only the weak hope of optimization. This change renames the method, deprecating the old name. It also adds javadoc calling out that the parameter is not a bound and referencing replay(int).autoConnect() as a way to achieve that behavior. 	Rename cache (int )to cacheWithCapacityHint (int )The parameter is a capacity hint ,but more frequently confused[-2]with a buffer size like[2]replay (int )than it is correctly understood .[sentence: 2,-2] It also offers no guarantees ,only the weak[-2]hope[3]of optimization .[sentence: 3,-2] This change renames the method ,deprecating the old name .[sentence: 1,-1] It also adds javadoc calling out that the parameter is not a bound and referencing replay (int ).[sentence: 1,-1] autoConnect ()as a way to achieve that behavior .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Renamed Completable#finallyDo to #doAfterTerminate 	Renamed Completable #finallyDo to #doAfterTerminate [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Deprecate Observable.finallyDo() and add Observable.doAfterTerminate() instead 	Deprecate Observable .[sentence: 1,-1] finallyDo ()and add Observable .[sentence: 1,-1] doAfterTerminate ()instead [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Public API changes for 1.1.0 release 	Public API changes for 1 .[sentence: 1,-1] 1 .[sentence: 1,-1] 0 release [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	1.x: GroupBy backpressure fix 	1 .[sentence: 1,-1] x[2]:GroupBy backpressure fix [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	Window operator now supports backpressure in the inner observable 	Window operator now supports[2]backpressure in the inner observable [sentence: 2,-1] [result: max + and - of any sentence]
3	-1	1.x Remove all instances of Atomic*FieldUpdater Replace them all with their respective Atomic* counterparts For example AtomicLongFieldUpdater -> AtomicLong Addresses https://github.com/ReactiveX/RxJava/issues/3459 	1 .[sentence: 1,-1] x[2]Remove all instances of Atomic *FieldUpdater Replace them all with their respective[3]Atomic *counterparts For example AtomicLongFieldUpdater ->AtomicLong Addresses https ://github .[sentence: 3,-1] com /ReactiveX /RxJava /issues /3459 [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Implements BlockingSingle This commit adds BlockingSingle, the blocking version of rx.Single. BlockingSingle has the following methods: i `from(Single)` -- factory method for creating a `BlockingSingle` from a `Single` - `get()` -- returns the value emitted from the Single - `get(Func1<T,Boolean> predicate)` -- returns the value if it matches the provided predicate - `toFuture()` -- returns a `java.util.concurrent.Future` Adds Single.toBlocking 	Implements BlockingSingle[-2]This commit adds BlockingSingle[-2],the blocking[-2]version of rx .[sentence: 1,-2] Single .[sentence: 1,-1] BlockingSingle[-2]has the following methods :i `from (Single )`--factory method for creating a `BlockingSingle[-2]`from a `Single `-`get ()`--returns the value[2]emitted from the Single -`get (Func1 <T ,Boolean >predicate )`--returns the value[2]if it matches the provided predicate -`toFuture ()`--returns a `java .[sentence: 2,-2] util .[sentence: 1,-1] concurrent .[sentence: 1,-1] Future `Adds Single .[sentence: 1,-1] toBlocking [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Removed the alias BlockingObservable#run 	Removed the alias BlockingObservable[-2]#run [sentence: 1,-2] [result: max + and - of any sentence]
2	-1	Renaming Observable#x to Observable#extend 	Renaming Observable #x[2]to Observable #extend [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Hiding start(), moved test to compensate. 	Hiding start (),moved test to compensate .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: CombineLatest removed leftover debug field + better cleanup 	2 .[sentence: 1,-1] x[2]:CombineLatest removed leftover debug field +better cleanup [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Single class + operators and test from 1.x + extra operators. 	2 .[sentence: 1,-1] x[2]:Single class +operators and test from 1 .[sentence: 2,-1] x[2]+extra operators .[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: non-backpressure NbpObservable all relevant operators + tests. 	2 .[sentence: 1,-1] x[2]:non -backpressure NbpObservable all relevant operators +tests .[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: disposable unit tests + fix to RefCountDisposable behavior + sorted `Observable` and added `@BackpressureSupport` and `SchedulerSupport` annotations. + created `@Beta` and `@Experimental` annotations, nothing is marked with them because I intent everything to be standard at this point. 	2 .[sentence: 1,-1] x[2]:disposable unit tests +fix to RefCountDisposable behavior +sorted `Observable `and added `@BackpressureSupport `and `SchedulerSupport `annotations .[sentence: 2,-1] +created `@Beta `and `@Experimental `annotations ,nothing is marked with them because I intent everything to be standard at this point .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: scheduler tests (no single() yet). 	2 .[sentence: 1,-1] x[2]:scheduler tests (no single ()yet ).[sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: operator test: switchIfEmpty, switchMap + bugfixes 	2 .[sentence: 1,-1] x[2]:operator test :switchIfEmpty ,switchMap +bugfixes [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: Operator debounce and defaultIfEmpty, fix to debounce behavior 	2 .[sentence: 1,-1] x[2]:Operator debounce and defaultIfEmpty ,fix to debounce behavior [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	2.x: added missing buffer overload (with boundary selector) + added AsyncSubscription that allows setting the actual subscription later and can hold a resource. It has less overhead than SubscriptionArbiter due to single use. 	2 .[sentence: 1,-1] x[2]:added missing buffer overload (with boundary selector )+added AsyncSubscription that allows setting the actual subscription later and can hold a resource .[sentence: 2,-1] It has less overhead than SubscriptionArbiter due to single use .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	2.x: test for buffer, I'm still missing the boundary-supplier version 	2 .[sentence: 1,-1] x[2]:test for buffer ,I'm still missing the boundary -supplier version [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Fixing concurrent unsubscribe case of SyncOnSubscribe 	Fixing concurrent unsubscribe case of SyncOnSubscribe [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Simpler tests of throttleLast, throttleWithTimeout, zip 	Simpler tests of throttleLast ,throttleWithTimeout ,zip [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Simpler tests for window reduce, scan, starWith. 	Simpler tests for window reduce ,scan ,starWith .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Simplest concat test from 1.x I've also added convenience overloads to concat 2-9 sources because `concat(Publisher...)` causes overload resolution conflict with `concat(Publisher<Publisher>)` 	Simplest concat test from 1 .[sentence: 1,-1] x[2]I've also added convenience overloads to concat 2 -9 sources[-2]because `concat (Publisher ...)`[sentence: 2,-2] causes overload resolution conflict[-2]with `concat (Publisher <Publisher >)`[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	First unit test and fixes to operators. 	First unit test and fixes to operators .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	UnicastSubject javadoc, support for onCancelled notification. The cancellation notification will come in handy with window (and in groupby). It helps with the case when the main source has been cancelled but the individual windows/groups are still being consumed. If those get cancelled by their single Subscribers, this notification will reach the source and once all windows/groups get cancelled, the main source can be cancelled. Fix to generator production accounting. 	UnicastSubject javadoc ,support[2]for onCancelled notification .[sentence: 2,-1] The cancellation[-2]notification will come in handy with window (and in groupby ).[sentence: 1,-2] It helps with the case when the main source[-2]has been cancelled[-2]but the individual windows /groups are still being consumed .[sentence: 1,-2] If those get cancelled[-2]by their single Subscribers ,this notification will reach the source[-2]and once all windows /groups get cancelled[-2],the main source[-2]can be cancelled[-2].[sentence: 1,-2] Fix to generator production accounting .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fixes to ReplaySubject and BehaviorSubject. 	Fixes to ReplaySubject and BehaviorSubject .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Implementing the SyncOnSubscribe 	Implementing the SyncOnSubscribe [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator buffer with boundary and open-close, fixes to the timed variants. Added QueueDrain and QueueDrainSubscriber for common queue-drain operations. Not applied outside the buffer()s as of now. 	Operator buffer with boundary and open -close ,fixes to the timed variants .[sentence: 1,-1] Added QueueDrain and QueueDrainSubscriber for common queue -drain operations .[sentence: 1,-1] Not applied outside the buffer ()s as of now .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator combineLatest 	Operator combineLatest [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator switchMap, switchOnNext, added missing merge and concat overloads, some refactorings 	Operator switchMap ,switchOnNext ,added missing merge and concat overloads ,some refactorings [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	ConditionalSubscriber to help fusing filter-like operators into emission/drain loops. 	ConditionalSubscriber to help fusing filter -like[2]operators into emission /drain loops .[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	collect: javac is unable to select the right overload for some reason 	collect :javac is unable to select the right overload for some reason [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator distinct, timeInterval, common Timed container. 	Operator distinct ,timeInterval ,common Timed container .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Workaround for another javac 1.8 bug. 	Workaround for another javac 1 .[sentence: 1,-1] 8 bug[-2].[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Basic Subscribers and RxJavaPlugin 	Basic Subscribers and RxJavaPlugin [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Schedulers (a few) + API, slight modifications to other classes, incomplete. 	Schedulers (a few )+API ,slight modifications to other classes ,incomplete .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactored exception reporting of most operators. 	Refactored exception reporting of most operators .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	catch onCompleted unsubscribe error and report to RxJavaPlugin error handler 	catch onCompleted unsubscribe error[-2]and report to RxJavaPlugin error[-2]handler [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Range overhead reduction 	Range overhead reduction [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Correct scheduler memory leak test for from(Executor) and added check for periodic tasks retention as well. 	Correct scheduler memory leak[-2]test for from (Executor )and added check for periodic tasks retention as well .[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	FromIterable overhead reduction. 	FromIterable overhead reduction .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Implemented Observable.x(ConversionFunc) to allow external extensions to Observables. 	Implemented Observable .[sentence: 1,-1] x[2](ConversionFunc )to allow external extensions to Observables .[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	No InterruptedException with synchronous BlockingObservable 	No InterruptedException[-2]with synchronous BlockingObservable[-2][sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Movet LinkedArrayListTest to the test section. 	Movet LinkedArrayListTest to the test section .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Private toObservable renamed to asObservable - Making room for the public toObservable method. 	Private toObservable renamed to asObservable -Making room for the public toObservable method .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Merge fully rewritten and other related optimizations 	Merge fully rewritten and other related optimizations [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Window with boundary observable: fixed unsubscription and behavior. 	Window with boundary observable :fixed unsubscription and behavior .[sentence: 1,-1] [result: max + and - of any sentence]
2	-4	rx.Single Adds `rx.Single` as an "Observable Future" for representing work with a single return value. See https://github.com/ReactiveX/RxJava/issues/1594 rx.Future/Task/Async/Single This provides a type similar to `Future` in that it represents a scalar unit of work, but it is lazy like an `Observable` and many `Single`s can be combined into an `Observable` stream. Note how `Single.zip` returns `Single<R>` whereas `Single.merge` returns `Observable<R>`. Examples of using this class: ```java import rx.Observable; import rx.Single; public class TaskExamples { public static void main(String... args) { // scalar synchronous value Single<String> t1 = Single.create(t -> { t.onSuccess("Hello World!"); }); // scalar synchronous value using helper method Single<Integer> t2 = Single.just(1); // synchronous error Single<String> error = Single.create(t -> { t.onError(new RuntimeException("failed!")); }); // executing t1.subscribe(System.out::println); t2.subscribe(System.out::println); error.subscribe(System.out::println, e -> System.out.println(e.getMessage())); // scalar Singles for request/response like a Future getData(1).subscribe(System.out::println); // combining Tasks into another Task Single<String> zipped = Single.zip(t1, t2, (a, b) -> a + " -- " + b); // combining Singles into an Observable stream Observable<String> merged = Single.merge(t1, t2.map(String::valueOf), getData(3)); Observable<String> mergeWith = t1.mergeWith(t2.map(String::valueOf)); zipped.subscribe(v -> System.out.println("zipped => " + v)); merged.subscribe(v -> System.out.println("merged => " + v)); mergeWith.subscribe(v -> System.out.println("mergeWith => " + v)); } /** * Example of an async scalar execution using Single.create * <p> * This shows the lazy, idiomatic approach for Rx exactly like an Observable except scalar. * * @param arg * @return */ public static Single<String> getData(int arg) { return Single.create(s -> { new Thread(() -> { try { Thread.sleep(500); } catch (Exception e) { e.printStackTrace(); } // deliver value s.onSuccess("Data=" + arg); }).start(); }); } } ``` 	rx .[sentence: 1,-1] Single Adds `rx .[sentence: 1,-1] Single `as an 'Observable Future 'for representing work with a single return value[2].[sentence: 2,-1] See https ://github .[sentence: 1,-1] com /ReactiveX /RxJava /issues /1594 rx .[sentence: 1,-1] Future /Task /Async /Single This provides a type similar to `Future `in that it represents a scalar unit of work ,but it is lazy[-2]like[2]an `Observable `and many `Single `s can be combined into an `Observable `stream .[sentence: 2,-2] Note how `Single .[sentence: 1,-1] zip `returns `Single <R >`whereas `Single .[sentence: 1,-1] merge `returns `Observable <R >`.[sentence: 1,-1] Examples of using this class :```java import rx .[sentence: 1,-1] Observable ;import rx .[sentence: 1,-1] Single ;public class TaskExamples {public static[-2]void[-2]main (String ...[sentence: 1,-2] args ){//scalar synchronous value[2]Single <String >t1 =Single .[sentence: 2,-1] create (t ->{t .[sentence: 1,-1] onSuccess ('Hello World ![+0.6 punctuation mood emphasis][sentence: 2,-1] ');});//scalar synchronous value[2]using helper method Single <Integer >t2 =Single .[sentence: 2,-1] just (1 );//synchronous error[-2]Single <String >error[-2]=Single .[sentence: 1,-2] create (t ->{t .[sentence: 1,-1] onError (new RuntimeException ('failed[-3]![-0.6 punctuation emphasis][sentence: 1,-4] '));});//executing t1 .[sentence: 1,-1] subscribe (System .[sentence: 1,-1] out ::println );t2 .[sentence: 1,-1] subscribe (System .[sentence: 1,-1] out ::println );error[-2].[sentence: 1,-2] subscribe (System .[sentence: 1,-1] out ::println ,e ->System .[sentence: 1,-1] out .[sentence: 1,-1] println (e .[sentence: 1,-1] getMessage ()));//scalar Singles for request /response like[2]a Future getData (1 ).[sentence: 2,-1] subscribe (System .[sentence: 1,-1] out ::println );//combining Tasks into another Task Single <String >zipped =Single .[sentence: 1,-1] zip (t1 ,t2 ,(a ,b )->a +'--'+b );//combining Singles into an Observable stream Observable <String >merged =Single .[sentence: 1,-1] merge (t1 ,t2 .[sentence: 1,-1] map (String ::valueOf ),getData (3 ));Observable <String >mergeWith =t1 .[sentence: 1,-1] mergeWith (t2 .[sentence: 1,-1] map (String ::valueOf ));zipped .[sentence: 1,-1] subscribe (v ->System .[sentence: 1,-1] out .[sentence: 1,-1] println ('zipped =>'+v ));merged .[sentence: 1,-1] subscribe (v ->System .[sentence: 1,-1] out .[sentence: 1,-1] println ('merged =>'+v ));mergeWith .[sentence: 1,-1] subscribe (v ->System .[sentence: 1,-1] out .[sentence: 1,-1] println ('mergeWith =>'+v ));}/***Example of an async scalar execution using Single .[sentence: 1,-1] create *<p >*This shows the lazy[-2],idiomatic approach for Rx exactly like[2]an Observable except scalar .[sentence: 2,-2] **@param arg *@return */public static[-2]Single <String >getData (int arg ){return Single .[sentence: 1,-2] create (s ->{new Thread (()->{try {Thread .[sentence: 1,-1] sleep (500 );}catch (Exception e ){e .[sentence: 1,-1] printStackTrace ();}//deliver value[2]s .[sentence: 2,-1] onSuccess ('Data ='+arg );}).[sentence: 1,-1] start ();});}}```[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	improve Subscriber readability and don't perform unnecessary test in request method 	improve[2]Subscriber readability and don't perform unnecessary[-2]test in request method [sentence: 2,-2] [result: max + and - of any sentence]
1	-2	Deprecate and rename the timer methods that take initial delay and period to interval. 	Deprecate and rename the timer methods that take initial delay[-2]and period to interval .[sentence: 1,-2] [result: max + and - of any sentence]
1	-2	stack overflow test can hang build, simplify the tests and ensure don't hang 	stack overflow[-2]test can hang[-2]build ,simplify the tests and ensure don't hang[-2][=0 negation][sentence: 1,-2] [result: max + and - of any sentence]
2	-1	Operators toList and toSortedList now support backpressure 	Operators toList and toSortedList now support[2]backpressure [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	add unit test to ensure that range with count of 0 sends onComplete even when initial request is 0 	add unit test to ensure that range with count of 0 sends onComplete even when initial request is 0 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Proposal: standardized Subject state-peeking methods. 	Proposal :standardized Subject state -peeking methods .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorMulticast.connect(connection) should return first subscription on multiple calls, address possible race condition provoking IAE 	OperatorMulticast .[sentence: 1,-1] connect (connection )should return first subscription on multiple calls ,address possible race condition provoking IAE [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Optimized scalar observeOn/subscribeOn 	Optimized scalar observeOn /subscribeOn [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	using should use unsafeSubscribe, allow eager disposal to enable the synchronous case 	using should use unsafeSubscribe ,allow eager disposal[-2]to enable the synchronous case [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Reporting stackoverflow caused stackoverflow 	Reporting stackoverflow caused stackoverflow [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Added experimental annotation, using propagate. 	Added experimental annotation ,using propagate .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Updating queue code from JCTools 	Updating queue code from JCTools [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Changed operator names, fixed backpressure. 	Changed operator names ,fixed backpressure .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Less concurrent threads and more in-line timeout detection. 	Less concurrent threads and more in -line timeout detection .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	ScheduledExecutorService: call purge periodically on JDK 6 to avoid cancelled task-retention. 	ScheduledExecutorService :call purge periodically on JDK 6 to avoid[-2]cancelled[-2]task -retention .[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Moved test cases for issue #2191 into OperatorReplayTest 	Moved test cases for issue #2191 into OperatorReplayTest [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Make Publish Operator Release RingBuffer - it was retaining the RxRingBuffer reference between subscribes which meant it was never released to the object pool 	Make Publish Operator Release RingBuffer -it was retaining the RxRingBuffer reference between subscribes which meant it was never released to the object pool [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Factored out the backpressure management into an experimental class and reimplemented Buffer and Block strategies with it. 	Factored out the backpressure management into an experimental class and reimplemented Buffer and Block[-2]strategies with it .[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Add "Subscriptions.unsubscribed" to fix the 'isUnsubscribed' issue 	Add 'Subscriptions .[sentence: 1,-1] unsubscribed 'to fix the 'isUnsubscribed 'issue [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Simplified the memory footprint. 	Simplified the memory footprint .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Avoid self-interrupting of a completing ScheduledAction. 	Avoid[-2]self -interrupting[-2]of a completing ScheduledAction .[sentence: 1,-2] [result: max + and - of any sentence]
1	-2	Fix mergeDelayError Handling of Error in Parent Observable Fixes https://github.com/ReactiveX/RxJava/issues/313 	Fix mergeDelayError Handling of Error[-2]in Parent Observable Fixes https ://github .[sentence: 1,-2] com /ReactiveX /RxJava /issues /313 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Remove Utility Functions from Public API Fixes https://github.com/ReactiveX/RxJava/issues/1797 	Remove Utility Functions from Public API Fixes https ://github .[sentence: 1,-1] com /ReactiveX /RxJava /issues /1797 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Publish with Backpressure 	Publish with Backpressure [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Combine RefCount Tests 	Combine RefCount Tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	longCount -> countLong Fixes https://github.com/ReactiveX/RxJava/issues/1684 	longCount ->countLong Fixes https ://github .[sentence: 1,-1] com /ReactiveX /RxJava /issues /1684 [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Delay Operator with Reactive Pull Backpressure Updated the implementations to support reactive pull backpressure. Fixes https://github.com/ReactiveX/RxJava/issues/1724 	Delay[-2]Operator with Reactive[-2]Pull Backpressure Updated the implementations to support[2]reactive[-2]pull backpressure .[sentence: 2,-2] Fixes https ://github .[sentence: 1,-1] com /ReactiveX /RxJava /issues /1724 [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move To Proper Location Was accidentally committed in old rxjava-core src folder. 	Move To Proper Location Was accidentally[-2]committed in old rxjava -core src folder .[sentence: 1,-2] [result: max + and - of any sentence]
2	-2	groupByUntil -> groupBy This collapses groupByUntil and groupBy into a single groupBy operator. The new implementation has 2 major changes: 1) It supports reactive pull backpressure. 2) Child GroupedObservables can be unsubscribed and they will be cleaned up and then new instances for the same key can be emitted, like groupByUntil, except that now instead of passing in a special durationSelector function, the child can be composed using take/takeUntil/etc to cause an unsubscribe. If the previous non-obvious groupBy behavior is wanted, then instead of unsubscribing, it can be filtered to ignore all further data, which is what the old groupBy used to do when a child was unsubscribed. 	groupByUntil ->groupBy This collapses[-2]groupByUntil and groupBy into a single groupBy operator .[sentence: 1,-2] The new implementation has 2 major changes :1 )It supports[2]reactive[-2]pull backpressure .[sentence: 2,-2] 2 )Child GroupedObservables can be unsubscribed and they will be cleaned up and then new instances for the same key can be emitted ,like[2]groupByUntil ,except that now instead of passing in a special[2]durationSelector function ,the child can be composed using take /takeUntil /etc to cause an unsubscribe .[sentence: 2,-1] If the previous non -obvious groupBy behavior is wanted ,then instead of unsubscribing ,it can be filtered to ignore all further data ,which is what the old groupBy used to do when a child was unsubscribed .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fix the race condition in BufferUntilSubscriber 	Fix the race condition in BufferUntilSubscriber [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	migrate to single-module build 	migrate to single -module build [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Deprecation Removal Removing all deprecated methods and types for 1.0 https://github.com/ReactiveX/RxJava/issues/1001 	Deprecation Removal Removing all deprecated methods and types for 1 .[sentence: 1,-1] 0 https ://github .[sentence: 1,-1] com /ReactiveX /RxJava /issues /1001 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Migrate Non-Core Modules Out - Delete all modules that have been moved into separate projects. - rename rxjava-core to rxjava 	Migrate Non -Core Modules Out -Delete all modules that have been moved into separate projects .[sentence: 1,-1] -rename rxjava -core to rxjava [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	add missing window with time overload, the one that has control over every parameter 	add missing window with time overload ,the one that has control over every parameter [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	doOnSubscribe 	doOnSubscribe [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	from(T) -> just(T) See https://github.com/Netflix/RxJava/issues/1563 for discussion. 	from (T )->just (T )See https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /1563 for discussion .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Clarify OperatorTextViewInputTest methods 	Clarify OperatorTextViewInputTest methods [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	TakeLastTimed with backpressure support 	TakeLastTimed with backpressure support[2][sentence: 2,-1] [result: max + and - of any sentence]
1	-1	mergeMap generics Fixes issue #1550 	mergeMap generics Fixes issue #1550 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Bring back ViewObservable.input(EditText, boolean) and rename new version to ViewObservable.text 	Bring back ViewObservable .[sentence: 1,-1] input (EditText ,boolean )and rename new version to ViewObservable .[sentence: 1,-1] text [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Make Android ViewObservable.input observe TextView instead of String 	Make Android ViewObservable .[sentence: 1,-1] input observe TextView instead of String [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Added another unit test to OperatorReduce/backpressure 	Added another unit test to OperatorReduce /backpressure [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Update JCTools Code 	Update JCTools Code [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	MergeDelayError & OnErrorFlatMap w/ Merge 	MergeDelayError &OnErrorFlatMap w /Merge [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Zip with Backpressure Support This supports both upstream and downstream backpressure. 	Zip with Backpressure Support[2]This supports[2]both upstream and downstream backpressure .[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Fix Merge Bug Working on https://github.com/Netflix/RxJava/issues/1420 	Fix Merge Bug[-2]Working on https ://github .[sentence: 1,-2] com /Netflix /RxJava /issues /1420 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Concurrency Fixes for RxRingBuffer & Merge 	Concurrency Fixes for RxRingBuffer &Merge [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Backpressure & 0.20.0-RC1 	Backpressure &0 .[sentence: 1,-1] 20 .[sentence: 1,-1] 0 -RC1 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Update Perf Tests matching with work being done for 0.20 to allow comparisons 	Update Perf Tests matching with work being done for 0 .[sentence: 1,-1] 20 to allow comparisons [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Better naming, and new test ... using to compare 0.19 and 0.20 so want in both. 	Better naming ,and new test ...[sentence: 1,-1] using to compare 0 .[sentence: 1,-1] 19 and 0 .[sentence: 1,-1] 20 so want in both .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Revision of JMH Tests - removal of all non-JMH perf tests 	Revision of JMH Tests -removal of all non -JMH perf tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fix head/tail false sharing issues. 	Fix head /tail false sharing issues .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fixed padding of the integer and node classes. 	Fixed padding of the integer and node classes .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Baseline Performance Tests Start of suite of general performance tests for comparing overall changes. 	Baseline Performance Tests Start of suite of general performance tests for comparing overall changes .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Join patterns extension for 4..9 and N arity joins. 	Join patterns extension for 4 ..[sentence: 1,-1] 9 and N arity joins .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Hide ChainedSubscription 	Hide ChainedSubscription [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move NewThreadWorker out from NewThreadScheduler - Break out ScheduledAction from NewThreadWorker 	Move NewThreadWorker out from NewThreadScheduler -Break out ScheduledAction from NewThreadWorker [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move RxThreadFactory out from NewThreadScheduler 	Move RxThreadFactory out from NewThreadScheduler [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	rx.operators -> rx.internal.operators 	rx .[sentence: 1,-1] operators ->rx .[sentence: 1,-1] internal .[sentence: 1,-1] operators [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Fix and Update JMH Perf Tests - The tests were wrong and re-using a single Subscriber instance which meant they weren't really testing much. - Same with the CountDownLatch which meant they weren't waiting if async. - Added several SerializePerf and PerfTransform tests 	Fix and Update JMH Perf Tests -The tests were wrong[-2]and re -using a single Subscriber instance which meant they weren't really testing much .[sentence: 1,-2] -Same with the CountDownLatch which meant they weren't waiting if async .[sentence: 1,-1] -Added several SerializePerf and PerfTransform tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Schedulers.from(Executor) As per decision at https://github.com/Netflix/RxJava/issues/1219#issuecomment-44454729 	Schedulers .[sentence: 1,-1] from (Executor )As per decision at https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /1219 #issuecomment -44454729 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Removal of ConcurrentHashMap from ReplaySubject and some NotificationLite cleanup. 	Removal of ConcurrentHashMap from ReplaySubject and some NotificationLite cleanup .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	fix GroupBy and GroupByUntil which are actually Operators 	fix GroupBy and GroupByUntil which are actually Operators [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename classes starting with Operator that are actually OnSubscribe implementations to start with OnSubscribe 	Rename classes starting with Operator that are actually OnSubscribe implementations to start with OnSubscribe [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move MPSC Queue to rx.internal.util 	Move MPSC Queue to rx .[sentence: 1,-1] internal .[sentence: 1,-1] util [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Better name for worker class running scheduled actions 	Better name for worker class running scheduled actions [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Moved to atomic field updaters. 	Moved to atomic field updaters .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Implement a cached thread scheduler using event loops 	Implement a cached thread scheduler using event loops [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	ReplaySubject enhancement with time and/or size bounds 	ReplaySubject enhancement with time and /or size bounds [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Unified the Subject management. 	Unified the Subject management .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	BehaviorSubject subscription timegap fix 2 	BehaviorSubject subscription timegap fix 2 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	BehaviorSubject subscription timegap fix 	BehaviorSubject subscription timegap fix [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	JMH Perf Tests for Schedulers.computation 	JMH Perf Tests for Schedulers .[sentence: 1,-1] computation [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Removed use of deprecated API from tests & operators, fixed year in headers, added and removed suppressions, fixed line endings, replaced tabs with spaces 	Removed use of deprecated API from tests &operators ,fixed year in headers ,added and removed suppressions[-2],fixed line endings ,replaced tabs with spaces [sentence: 1,-2] [result: max + and - of any sentence]
2	-1	Scheduler correctness improvements. 	Scheduler correctness improvements[2].[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Operator Delay rebase & fixes 	Operator Delay[-2]rebase &fixes [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Operator Window and other changes 	Operator Window and other changes [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fixes to the operators. 	Fixes to the operators .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorTakeLast 	OperatorTakeLast [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorTakeUntil 	OperatorTakeUntil [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator TakeTimed 	Operator TakeTimed [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator Switch 	Operator Switch [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Conditional statements contribution to Operator 	Conditional statements contribution to Operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator When 	Operator When [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operators of contrib-math 	Operators of contrib -math [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorSkipUntil 	OperatorSkipUntil [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorSkipTimed 	OperatorSkipTimed [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorSequenceEqual 	OperatorSequenceEqual [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator ParallelMerge 	Operator ParallelMerge [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Operator OnExceptionResumeNextViaObservable 	Operator OnExceptionResumeNextViaObservable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorTakeWhile 	OperatorTakeWhile [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorThrottleFirst 	OperatorThrottleFirst [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorTimeInterval 	OperatorTimeInterval [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorUsing 	OperatorUsing [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorOnErrorReturn 	OperatorOnErrorReturn [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorOnErrorResumeNextViaObservable 	OperatorOnErrorResumeNextViaObservable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorMulticastAndReplay 	OperatorMulticastAndReplay [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorMergeMaxConcurrent 	OperatorMergeMaxConcurrent [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorMergeDelayError 	OperatorMergeDelayError [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorJoin 	OperatorJoin [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorAsync 	OperatorAsync [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorToMap 	OperatorToMap [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorToMultimap 	OperatorToMultimap [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorTimerAndSample 	OperatorTimerAndSample [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorGroupJoin 	OperatorGroupJoin [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorGroupByUntil 	OperatorGroupByUntil [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorDebounce 	OperatorDebounce [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorToObservableFuture 	OperatorToObservableFuture [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorMergeMap 	OperatorMergeMap [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorFinallyDo 	OperatorFinallyDo [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorDematerialize 	OperatorDematerialize [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorDefer 	OperatorDefer [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename concat test 	Rename concat test [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Scheduler.Inner -> Scheduler.Worker As per decision at https://github.com/Netflix/RxJava/issues/997#issuecomment-40998613 	Scheduler .[sentence: 1,-1] Inner ->Scheduler .[sentence: 1,-1] Worker As per decision at https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /997 #issuecomment -40998613 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperationAnyTest -> OperatorAnyTest Match new naming convention. 	OperationAnyTest ->OperatorAnyTest Match new naming convention .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorAsObservable 	OperatorAsObservable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorAll 	OperatorAll [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	ComputationScheduler -> EventLoopsScheduler - This implementation is used by Schedulers.computation() but is actually a pool of event loops, so renaming. 	ComputationScheduler ->EventLoopsScheduler -This implementation is used by Schedulers .[sentence: 1,-1] computation ()but is actually a pool of event loops ,so renaming .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Reimplement the "SkipLast" operator with time 	Reimplement the 'SkipLast 'operator with time [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename OperationSkipLast to OperatorSkipLast 	Rename OperationSkipLast to OperatorSkipLast [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Reimplement "SkipLast" operator 	Reimplement 'SkipLast 'operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move rx.joins to rxjava-joins module Migrating rx.joins into a separate contrib module as part of roadmap to 1.0: https://github.com/Netflix/RxJava/issues/1001#issuecomment-40390984 This is being done until the rx.joins API has further time to mature as it is likely to change and we can't make breaking changes any further once we hit 1.0. 	Move rx .[sentence: 1,-1] joins to rxjava -joins module Migrating rx .[sentence: 1,-1] joins into a separate contrib module as part of roadmap to 1 .[sentence: 1,-1] 0 :https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /1001 #issuecomment -40390984 This is being done until the rx .[sentence: 1,-1] joins API has further time to mature as it is likely to change and we can't make breaking changes any further once we hit 1 .[sentence: 1,-1] 0 .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Remove ExecutorScheduler - New ComputationScheduler - see https://github.com/Netflix/RxJava/issues/711 and https://github.com/Netflix/RxJava/issues/713 	Remove ExecutorScheduler -New ComputationScheduler -see https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /711 and https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /713 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	degreeOfParallelism() -> parallelism() https://github.com/Netflix/RxJava/issues/997#issuecomment-40819656 	degreeOfParallelism ()->parallelism ()https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /997 #issuecomment -40819656 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	inner() -> createInner() See https://github.com/Netflix/RxJava/issues/997#issuecomment-40818768 	inner ()->createInner ()See https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /997 #issuecomment -40818768 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Scheduler.inner() for Language and Contrib Modules 	Scheduler .[sentence: 1,-1] inner ()for Language and Contrib Modules [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Scheduler.inner() for Core 	Scheduler .[sentence: 1,-1] inner ()for Core [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorWeakBinding -> OperatorConditionalBinding 	OperatorWeakBinding ->OperatorConditionalBinding [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Unit Test and Review of #1027 	Unit Test and Review of #1027 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Updating the new sample to demonstrate UI binding This commit binds the observable to a method where a user can update their UI accordingly. 	Updating the new sample to demonstrate UI binding This commit binds the observable to a method where a user can update their UI accordingly .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	OperatorWeakBinding to not use WeakReferences anymore related issues: https://github.com/Netflix/RxJava/pull/1008 https://github.com/Netflix/RxJava/issues/1006 https://github.com/Netflix/RxJava/issues/979 	OperatorWeakBinding to not use WeakReferences[-2]anymore related issues :https ://github .[sentence: 1,-2] com /Netflix /RxJava /pull /1008 https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /1006 https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /979 [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Remove Redundant protectivelyWrap Method 	Remove Redundant[-2]protectivelyWrap Method [sentence: 1,-2] [result: max + and - of any sentence]
2	-2	Fix BlockingOperator Subscribe Behavior The blocking operators need to use 'subscribe', not 'unsafeSubscribe' since they need the SafeSubscriber behavior in the final subscribe step they perform. Renamed operators to BlockingOperator* for clarity and to match the Operation->Operator naming change. 	Fix BlockingOperator[-2]Subscribe Behavior The blocking[-2]operators need to use 'subscribe ',not 'unsafeSubscribe 'since they need the SafeSubscriber[2]behavior in the final subscribe step they perform .[sentence: 2,-2] Renamed operators to BlockingOperator[-2]*for clarity and to match the Operation ->Operator naming change .[sentence: 1,-2] [result: max + and - of any sentence]
1	-2	Func0 can transparently implement java.util.concurrent.Callable. This change doesn't change the API at all for users of Func0, but it makes all Func0 objects immediately reusable with any JDK API that accepts Callables. For example, a Func0 can now be submitted directly to an ExecutorService for asynchronous execution. It also allows the elimination of a small amount of redundant code within RxJava itself. 	Func0 can transparently implement java .[sentence: 1,-1] util .[sentence: 1,-1] concurrent .[sentence: 1,-1] Callable .[sentence: 1,-1] This change doesn't change the API at all for users of Func0 ,but it makes all Func0 objects immediately reusable with any JDK API that accepts Callables .[sentence: 1,-1] For example ,a Func0 can now be submitted directly to an ExecutorService for asynchronous execution .[sentence: 1,-1] It also allows the elimination[-2]of a small amount of redundant[-2]code within RxJava itself .[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Perf Tests with JMH 	Perf Tests with JMH [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Migrate Pre-JMH Tests to rx.archive 	Migrate Pre -JMH Tests to rx .[sentence: 1,-1] archive [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Reimplement the ElementAt operator 	Reimplement the ElementAt operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename OperationFirstOrDefaultTest and OperationLastTest to OperatorFirstOrDefaultTest and OperatorLastTest 	Rename OperationFirstOrDefaultTest and OperationLastTest to OperatorFirstOrDefaultTest and OperatorLastTest [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Reimplement the 'single' operator 	Reimplement the 'single 'operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Updated ObservableBenchmark to follow better benchmarking practices 	Updated ObservableBenchmark to follow better benchmarking practices [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Synchronize -> Serialize - migrate all usage to Serialized instead of Synchronized - remove implementations of SerializedObserver that lost the competition (performance and testing in production) 	Synchronize ->Serialize -migrate all usage to Serialized instead of Synchronized -remove implementations of SerializedObserver that lost the competition (performance and testing in production )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Unit tests for each 	Unit tests for each [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Clarify names during testing 	Clarify names during testing [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Experimenting with different implementations and performance 	Experimenting with different implementations and performance [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	not quite functional ... and slow 	not quite functional ...[sentence: 1,-1] and slow [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Guard the log calls 	Guard the log calls [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Add full example for Activity + retained fragment + cache 	Add full example for Activity +retained fragment +cache [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename OperationAmb to OperatorAmb 	Rename OperationAmb to OperatorAmb [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperationAll to OperatorAll 	OperationAll to OperatorAll [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	OperationRetry -> OperatorRetry Updated to use "lift" and Subscriber. Fixes https://github.com/Netflix/RxJava/issues/943 Observable.retry() does not unsubscribe from source 	OperationRetry ->OperatorRetry Updated to use 'lift 'and Subscriber .[sentence: 1,-1] Fixes https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /943 Observable .[sentence: 1,-1] retry ()does not unsubscribe from source[-2][sentence: 1,-2] [result: max + and - of any sentence]
1	-1	refactor the debug hooks before they become a breaking change. 	refactor the debug hooks before they become a breaking change .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Fixed state capture bug. Added some additional tests 	Fixed state capture[-2]bug[-2].[sentence: 1,-2] Added some additional tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Implemented Skip using Lift in Observable and OperatorSkip Deleted non-time part from OperationSkip Moved tests to OperatorSkipTest 	Implemented Skip using Lift in Observable and OperatorSkip Deleted non -time part from OperationSkip Moved tests to OperatorSkipTest [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	A number of improvements to OperatorObserveFromAndroidComponent - move the UI thread assert out of the operator and into the helpers; this way, we don't fail the observer anymore with an exception, but the caller. - do not loop unsubscribe through the main thread anymore. This unnecessarily defers releasing the references, and might in fact be processed only after Android creates the component after a rotation change. I had to make the references volatile for this to work. - immediately unsubscribe in case we detect the componentRef has become invalid. This solves the problem that dangling observers would continue to listen to notifications with no observer alive anymore. refs: https://github.com/Netflix/RxJava/issues/754 https://github.com/Netflix/RxJava/issues/899 	A number of improvements[2]to OperatorObserveFromAndroidComponent -move the UI thread assert out of the operator and into the helpers ;this way ,we don't fail[-3][=0 negation]the observer anymore with an exception ,but the caller .[sentence: 2,-1] -do not loop unsubscribe through the main thread anymore .[sentence: 1,-1] This unnecessarily[-2]defers releasing the references ,and might in fact be processed only after Android creates the component after a rotation change .[sentence: 1,-2] I had to make the references volatile[-2]for this to work .[sentence: 1,-2] -immediately unsubscribe in case we detect the componentRef has become invalid[-2].[sentence: 1,-2] This solves the problem[-2]that dangling observers would continue to listen to notifications with no observer alive anymore .[sentence: 1,-2] refs :https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /754 https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /899 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Changes made while integrating it with our internal system 	Changes made while integrating it with our internal system [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Scheduler instances should be or behave like singletons - remove the Func0 factory signature for Scheduler creation. 	Scheduler instances should be or behave like[2]singletons -remove the Func0 factory signature for Scheduler creation .[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Rename RxJavaSchedulers to RxJavaDefaultSchedulers Clearer semantic naming. 	Rename RxJavaSchedulers to RxJavaDefaultSchedulers Clearer semantic naming .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactor to more descriptive name: OnErrorThrowable.addValueAsLastCause 	Refactor to more descriptive name :OnErrorThrowable .[sentence: 1,-1] addValueAsLastCause [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rewrite OperationObserveFromAndroidComponent to OperatorObserveFromAndroidComponent 	Rewrite OperationObserveFromAndroidComponent to OperatorObserveFromAndroidComponent [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactor OnErrorResumeNextViaFunction to Operator 	Refactor OnErrorResumeNextViaFunction to Operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move rx.util.functions to rx.functions Eliminate dumping ground of rx.util 	Move rx .[sentence: 1,-1] util .[sentence: 1,-1] functions to rx .[sentence: 1,-1] functions Eliminate[-2]dumping[-2]ground of rx .[sentence: 1,-2] util [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move time based util classes to rx.schedulers Eliminate dumping ground of rx.util 	Move time based util classes to rx .[sentence: 1,-1] schedulers Eliminate[-2]dumping[-2]ground of rx .[sentence: 1,-2] util [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move Exception Classes to rx.exceptions Eliminate dumping ground of rx.util 	Move Exception Classes to rx .[sentence: 1,-1] exceptions Eliminate[-2]dumping[-2]ground of rx .[sentence: 1,-2] util [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Split SubscribeOn into SubscribeOn/UnsubscribeOn Working with @headinthebox based on discussions at https://github.com/Netflix/RxJava/pull/869 and https://github.com/Netflix/RxJava/pull/880#issuecomment-35163539 we determined that there are times when `unsubscribeOn` behavior is needed. The `subscribeOn` operator can not mix `subscribe` and `unsubscribe` scheduling behavior without breaking the `lift`/`Subscriber` behavior that allows unsubscribing synchronous sources. The newly added `unsubscribeOn` operator will not work with synchronous unsubscribes, but it will work for the targeted use cases such as UI event handlers. 	Split SubscribeOn into SubscribeOn /UnsubscribeOn Working with @headinthebox based on discussions at https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /869 and https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /880 #issuecomment -35163539 we determined that there are times when `unsubscribeOn `behavior is needed .[sentence: 1,-1] The `subscribeOn `operator can not mix `subscribe `and `unsubscribe `scheduling behavior without breaking the `lift `/`Subscriber `behavior that allows unsubscribing synchronous sources[-2].[sentence: 1,-2] The newly added `unsubscribeOn `operator will not work with synchronous unsubscribes ,but it will work for the targeted use cases such as UI event handlers .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Revert Bounded ObserveOn 	Revert[-2]Bounded ObserveOn [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Update OperationScan to OperatorScan Migrate to use updated conventions of Operator* classes that implement rx.Observable.Operator 	Update OperationScan to OperatorScan Migrate to use updated conventions of Operator *classes that implement rx .[sentence: 1,-1] Observable .[sentence: 1,-1] Operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Convert to scan to use lift 	Convert to scan to use lift [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Fixing the generics for merge and lift 	Fixing the generics for merge and lift [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move InterruptibleBlockingQueue Inside ObserveOn I decided I'm not ready to commit to this in the public API so am leaving it an implementation detail of ObserveOn. While working on groupBy, parallel and subscribeOn this queue was not the right solution. 	Move InterruptibleBlockingQueue[-2]Inside ObserveOn I decided I'm not ready to commit to this in the public API so am leaving it an implementation detail of ObserveOn .[sentence: 1,-2] While working on groupBy ,parallel and subscribeOn this queue was not the right solution .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename the files 	Rename the files [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Revert to OperationMergeMaxConcurrent The new OperatorMerge class still exists, but reverting this one. I messed up the thread safety and don't have time to figure it out. 	Revert[-2]to OperationMergeMaxConcurrent The new OperatorMerge class still exists ,but reverting[-2]this one .[sentence: 1,-2] I messed up the thread safety[2]and don't have time to figure it out .[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Added overloaded createRequest method that takes an HttpContext instance 	Added overloaded createRequest method that takes an HttpContext instance [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Split Merge and MergeMaxConcurrent - Splitting them allows clearer code and avoids use of queue for normal merge. 	Split Merge and MergeMaxConcurrent -Splitting them allows clearer code and avoids[-2]use of queue for normal merge .[sentence: 1,-2] [result: max + and - of any sentence]
2	-1	OperatorFilter Migrated to Lift Operator - support synchronous unsubscribe now 	OperatorFilter Migrated to Lift Operator -support[2]synchronous unsubscribe now [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Rename OperatorFromIterable to OnSubscribeFromIterable 	Rename OperatorFromIterable to OnSubscribeFromIterable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	ObserveOn with Buffer Size 	ObserveOn with Buffer Size [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	ObserveOn Merge from @akarnokd:OperatorRepeat2 	ObserveOn Merge from @akarnokd :OperatorRepeat2 [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Special Handling of java.lang.Error and OnErrorNotImplemented - https://github.com/Netflix/RxJava/issues/748#issuecomment-32471495 - https://github.com/Netflix/RxJava/issues/771 - https://github.com/Netflix/RxJava/issues/789 - SynchronizedObserver is for synchronization, not error handling or contract enforcements, that's the job of SafeSubscriber - Removed some unit tests that were asserting unsubscribe behavior that relied on SynchronizedObserver. They were testing something they are not responsible for. 	Special[2]Handling of java .[sentence: 2,-1] lang .[sentence: 1,-1] Error[-2]and OnErrorNotImplemented -https ://github .[sentence: 1,-2] com /Netflix /RxJava /issues /748 #issuecomment -32471495 -https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /771 -https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /789 -SynchronizedObserver is for synchronization ,not error[-2][=0 negation]handling or contract enforcements[-2],that's the job of SafeSubscriber[2]-Removed some unit tests that were asserting unsubscribe behavior that relied on SynchronizedObserver .[sentence: 2,-2] They were testing something they are not responsible for .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Subscribers/Observers.empty() 	Subscribers /Observers .[sentence: 1,-1] empty ()[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorRepeat 	OperatorRepeat [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	OperatorZipIterable 	OperatorZipIterable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Subscribers for common factory methods Similar to Observers. 	Subscribers for common factory methods Similar to Observers .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Reimplement Zip Operator Using Lift - Use new lift operator implement and non-blocking synchronization approach. - I have had the concurrency model reviewed by some colleagues and all unit tests are passing but further review is justified and welcome. 	Reimplement Zip Operator Using Lift -Use new lift operator implement and non -blocking[-2]synchronization approach .[sentence: 1,-2] -I have had the concurrency model reviewed by some colleagues and all unit tests are passing but further review is justified and welcome[2].[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Update Modules to New Scheduler 	Update Modules to New Scheduler [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Scheduler Outer/Inner 	Scheduler Outer /Inner [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Restored use of Observer in most places 	Restored use of Observer in most places [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Subscriber and Observer -> Restore Observer interface -> Subscriber implements Observer, Subscription 	Subscriber and Observer ->Restore Observer interface ->Subscriber implements Observer ,Subscription [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Observer+Subscription -> Subscriber 	Observer +Subscription ->Subscriber [sentence: 1,-1] [result: max + and - of any sentence]
1	-3	Operator Tests Retrofitted to use TestObserver - work around inability of Mockito to correctly mock an abstract class - 15 of 590 tests still failing 	Operator Tests Retrofitted to use TestObserver -work around inability[-2]of Mockito to correctly mock an abstract class -15 of 590 tests still failing[-3][sentence: 1,-3] [result: max + and - of any sentence]
1	-3	Compiling. Unit Tests Failing. Now that Observer is an abstract class, Mockito is having issues with it so unit tests are a mess. 	Compiling .[sentence: 1,-1] Unit Tests Failing[-3].[sentence: 1,-3] Now that Observer is an abstract class ,Mockito is having issues with it so unit tests are a mess .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move Observer factory methods to Observers Follow same pattern as rx.observables, rx.schedulers, rx.subjects, rx.subscriptions 	Move Observer factory methods to Observers Follow same pattern as rx .[sentence: 1,-1] observables ,rx .[sentence: 1,-1] schedulers ,rx .[sentence: 1,-1] subjects ,rx .[sentence: 1,-1] subscriptions [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	`Observer` becomes `Observer implements Subscription` As per decision at https://github.com/Netflix/RxJava/issues/775#issuecomment-33075742 	`Observer `becomes `Observer implements Subscription `As per decision at https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /775 #issuecomment -33075742 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename `bind` to `lift` As per discussion at https://github.com/Netflix/RxJava/issues/775#issuecomment-33075742 	Rename `bind `to `lift `As per discussion at https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /775 #issuecomment -33075742 [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Fix Zip race condition ItemObserver onNext might not acquire the write lock due to an onCompleted being handled by another thread. When handling onCompleted, the ItemObserver does not check for any values that are ready to be emitted, which might cause OperationZip to never emit OnNext or OnCompleted. 	Fix Zip race condition ItemObserver onNext might not acquire the write lock due to an onCompleted being handled by another thread .[sentence: 1,-1] When handling onCompleted ,the ItemObserver does not check for any values[2]that are ready to be emitted ,which might cause OperationZip to never emit OnNext or OnCompleted .[sentence: 2,-1] [result: max + and - of any sentence]
1	-2	Updates while validating no major performance and memory regressions 	Updates while validating no major performance and memory regressions[-2][sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Bind implementation of Parallel 	Bind implementation of Parallel [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	New Bind Signature and GroupBy Operator - Changed `bind` signature to match the variant discussed at https://github.com/Netflix/RxJava/issues/746#issuecomment-32711145 - Updated code to new signature. - Re-implemented GroupBy operator with `bind` 	New Bind Signature and GroupBy Operator -Changed `bind `signature to match the variant discussed at https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /746 #issuecomment -32711145 -Updated code to new signature .[sentence: 1,-1] -Re -implemented GroupBy operator with `bind `[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Bind implementation of Merge - it’s working … but I can’t figure out the co/contra-variance for the generics! anyone have ideas? 	Bind implementation of Merge -it ’s working …but I can ’t figure out the co /contra -variance for the generics ![+0.6 punctuation mood emphasis][sentence: 2,-1] anyone have ideas ?[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Bind implementation of Map, Cast, Timestamp 	Bind implementation of Map ,Cast ,Timestamp [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Bind implementation of fromIterable, toList, toSortedList 	Bind implementation of fromIterable ,toList ,toSortedList [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Re-implemented Take Operator with Bind - also simplified implementation to not worry about thread-safety as per Rx contract - performance improvement from 4,033,468 ops/sec -> 6,731,287 ops/sec 	Re -implemented Take Operator with Bind -also simplified implementation to not worry[-4][=0 negation]about thread -safety[2]as per Rx contract -performance improvement[2]from 4 ,033 ,468 ops /sec ->6 ,731 ,287 ops /sec [sentence: 2,-1] [result: max + and - of any sentence]
1	-3	Added Observable.bind - new create signature - new bind operator - new subscribe overload - OperationReplay is failing unit tests, all others are passing 	Added Observable .[sentence: 1,-1] bind -new create signature -new bind operator -new subscribe overload -OperationReplay is failing[-3]unit tests ,all others are passing [sentence: 1,-3] [result: max + and - of any sentence]
1	-2	Create /src/perf for Performance Tests - Move existing performance tests into this source folder. - Not building via Gradle yet … I have yet to figure that part out. 	Create /src /perf for Performance Tests -Move existing performance tests into this source[-2]folder .[sentence: 1,-2] -Not building via Gradle yet …I have yet to figure that part out .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Separated Android test code from source. 	Separated Android test code from source[-2].[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Modified to conform Rx.NET 	Modified to conform Rx .[sentence: 1,-1] NET [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	ToObservableIterable Recursion/Loop - the ImmediateScheduler no longer schedules itself but uses a loop - 10-20x faster to use a loop rather than schedule itself recursively 	ToObservableIterable Recursion /Loop -the ImmediateScheduler no longer schedules itself but uses a loop -10 -20x faster to use a loop rather than schedule itself recursively [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	rxjava-computation-expressions The conditional operators are going in this contrib module. See https://github.com/Netflix/RxJava/issues/683 	rxjava -computation -expressions The conditional operators are going in this contrib module .[sentence: 1,-1] See https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /683 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Updated Schedulers Unit Tests - merged all scheduler tests into the same package - using inheritance so that the same tests are applied to each of the different Scheduler implementations - manual test (too slow for normal execution) can be run to test memory leaks (TestRecursionMemoryUsage.java) 	Updated Schedulers Unit Tests -merged all scheduler tests into the same package -using inheritance so that the same tests are applied to each of the different Scheduler implementations -manual test (too slow for normal execution )can be run to test memory leaks (TestRecursionMemoryUsage .[sentence: 1,-1] java )[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	CurrentThreadScheduler Memory Leak Fixed - Current/Immediate/NewThread/Executor Schedulers are passing unit tests - Current/NewThread/Executor Schedulers do not leak memory on the recursion test (Immediate can’t be used for recursion otherwise it stack overflows) 	CurrentThreadScheduler Memory Leak[-2]Fixed -Current /Immediate /NewThread /Executor Schedulers are passing unit tests -Current /NewThread /Executor Schedulers do not leak[-2][=0 negation]memory on the recursion test (Immediate can ’t be used for recursion otherwise it stack overflows[-2])[sentence: 1,-2] [result: max + and - of any sentence]
2	-2	ExecutorScheduler Memory Leak Fix - new InnerExecutorScheduler and childSubscription - improvements to unit tests 	ExecutorScheduler Memory Leak[-2]Fix -new InnerExecutorScheduler and childSubscription -improvements[2]to unit tests [sentence: 2,-2] [result: max + and - of any sentence]
1	-1	Scheduler Unit Tests - passing for all but ExecutorScheduler 	Scheduler Unit Tests -passing for all but ExecutorScheduler [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Update Scheduler Tests for Recursion and Common Testing 	Update Scheduler Tests for Recursion and Common Testing [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	New contrib module: rxjava-async-util Home for async utility functions with juc.Future, Actions, Functions etc that don’t need to be in rxjava-core. As per discussions at: - https://github.com/Netflix/RxJava/pull/646#issuecomment-31147005 - https://github.com/Netflix/RxJava/pull/645#issuecomment-31146492 - https://github.com/Netflix/RxJava/pull/622#issuecomment-31144128 	New contrib module :rxjava -async -util Home for async utility functions with juc .[sentence: 1,-1] Future ,Actions ,Functions etc that don ’t need to be in rxjava -core .[sentence: 1,-1] As per discussions at :-https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /646 #issuecomment -31147005 -https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /645 #issuecomment -31146492 -https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /622 #issuecomment -31144128 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Standardize Naming of average/sum methods See https://github.com/Netflix/RxJava/pull/698#issuecomment-31282416 	Standardize Naming of average /sum methods See https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /698 #issuecomment -31282416 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename to ReduceTest 	Rename to ReduceTest [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Fix SafeObserver handling of onComplete errors Fixes https://github.com/Netflix/RxJava/issues/630 	Fix SafeObserver[2]handling of onComplete errors[-2]Fixes https ://github .[sentence: 2,-2] com /Netflix /RxJava /issues /630 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	doOnNext, doOnCompleted, doOnError, doOnEach 	doOnNext ,doOnCompleted ,doOnError ,doOnEach [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Naming and Class Conventions - make concrete implementations final as extending them is dangerous (use composition and implement Subscription instead) - deprecated long get/setSubscription methods in favor of short verbs (add/get/set/clear/remove) - updated unit tests with changes 	Naming and Class Conventions -make concrete implementations final as extending them is dangerous[-2](use composition and implement Subscription instead )-deprecated long get /setSubscription methods in favor[2]of short verbs (add /get /set /clear /remove )-updated unit tests with changes [sentence: 2,-2] [result: max + and - of any sentence]
1	-1	Refactor MultipleAssignment - simplified state machine 	Refactor MultipleAssignment -simplified state machine [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactor CompositeSubscription - simplified state machine - removed busy spin state 	Refactor CompositeSubscription -simplified state machine -removed busy spin state [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Added create with initial capacity. 	Added create with initial capacity .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Refactor for Performance - previous commit got non-blocking working but perf tests showed it slow - this commit retains non-blocking but surpasses master branch performance Master branch: 11,947,459 ops/sec This commit: 16,151,174 ops/sec 	Refactor for Performance -previous commit got non -blocking[-2]working but perf tests showed it slow -this commit retains non -blocking[-2]but surpasses master branch performance Master branch :11 ,947 ,459 ops /sec This commit :16 ,151 ,174 ops /sec [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	License Header and Separate out Perf Tests 	License Header and Separate out Perf Tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Subject Refactor - Common logic composed inside SubjectSubscriptionManager - ReplaySubject does not block while replaying to new subscribers - Added unit tests and fixed behavior while reviewing with @headinthebox compared to Rx.Net - Uses mostly non-blocking approach (I believe it’s all correct, unit and long running tests have been used to prove it. The tests found concurrency problems during development and became stable once I got the design correct. As with all concurrent code I may be missing something.) 	Subject Refactor -Common logic composed inside SubjectSubscriptionManager -ReplaySubject does not block[-2][=0 negation]while replaying to new subscribers -Added unit tests and fixed behavior while reviewing with @headinthebox compared to Rx .[sentence: 1,-1] Net -Uses mostly non -blocking[-2]approach (I believe it ’s all correct ,unit and long running tests have been used to prove it .[sentence: 1,-2] The tests found concurrency problems[-2]during development and became stable[-2]once I got the design correct .[sentence: 1,-2] As with all concurrent code I may be missing something .)[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Implement the blocking/non-blocking single, singleOrDefault, first, firstOrDefault, last, lastOrDefault 	Implement the blocking[-2]/non -blocking[-2]single ,singleOrDefault ,first ,firstOrDefault ,last ,lastOrDefault [sentence: 1,-2] [result: max + and - of any sentence]
1	-2	Fixed the blocking/non-blocking first 	Fixed the blocking[-2]/non -blocking[-2]first [sentence: 1,-2] [result: max + and - of any sentence]
1	-2	ObserveOn Fixes - fix subscription leak (Composite+MultipleAssignment instead of just Composite) - add unit tests 	ObserveOn Fixes -fix subscription leak[-2](Composite +MultipleAssignment instead of just Composite )-add unit tests [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Operation: Replay additional overloads 	Operation :Replay additional overloads [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Migrate code to use rx.schedulers instead of rx.concurrency Unit tests passed before and after (did change in multiple steps to assert unit test pass against rx.concurrency before migrating to rx.schedulers). 	Migrate code to use rx .[sentence: 1,-1] schedulers instead of rx .[sentence: 1,-1] concurrency Unit tests passed before and after (did change in multiple steps to assert unit test pass against[-2]rx .[sentence: 1,-2] concurrency before migrating to rx .[sentence: 1,-1] schedulers ).[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Backwards compatible deprecated rx.concurrency classes These will exist for a few releases to allow people to migrate from rx.concurrency to rx.schedulers. 	Backwards compatible deprecated rx .[sentence: 1,-1] concurrency classes These will exist for a few releases to allow people to migrate from rx .[sentence: 1,-1] concurrency to rx .[sentence: 1,-1] schedulers .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Migrate Schedulers to rx.schedulers package 	Migrate Schedulers to rx .[sentence: 1,-1] schedulers package [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Lock-free subscriptions 	Lock -free subscriptions [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	ObserveOn fix for observing the same source on the same scheduler by two different observers. 	ObserveOn fix for observing the same source[-2]on the same scheduler by two different observers .[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	moving the AssertObservable class to the test side of the build. 	moving the AssertObservable class to the test side of the build .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Moving StringObservable to contrib module 	Moving StringObservable to contrib module [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	BugFix: Handling of Terminal State for Behavior/Publish Subjects - They were not correctly emitting onCompleted when new Observers subscribed after the Subject was terminated. - Added same logic that already existed on AsyncSubject 	BugFix :Handling of Terminal State for Behavior /Publish Subjects -They were not correctly emitting onCompleted when new Observers subscribed after the Subject was terminated .[sentence: 1,-1] -Added same logic that already existed on AsyncSubject [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Added test 	Added test [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Fix ObserveOn and add ParallelMerge Scheduler overload - ObserveOn was not correctly recursing when the source was async. It would create a new scheduler (i.e. a new thread) each time. - Also added unit tests to ParallelMerge 	Fix ObserveOn and add ParallelMerge Scheduler overload -ObserveOn was not correctly recursing when the source[-2]was async .[sentence: 1,-2] It would create a new scheduler (i .[sentence: 1,-1] e .[sentence: 1,-1] a new thread )each time .[sentence: 1,-1] -Also added unit tests to ParallelMerge [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactored ObserveOn without ScheduledObserver 	Refactored ObserveOn without ScheduledObserver [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	BugFix: AsyncSubject - it was not emitting values to observers that subscribed after onCompleted/onError 	BugFix :AsyncSubject -it was not emitting values[2]to observers that subscribed after onCompleted /onError [sentence: 2,-1] [result: max + and - of any sentence]
2	-1	DoOn Tweaks - do not have 2 method overloads with similar method signatures, dynamic languages can not negotiate method dispatch using function arity - add doOnCompleted and doOnError methods instead of different doOnEach overloads 	DoOn Tweaks -do not have 2 method overloads with similar method signatures ,dynamic[2]languages can not negotiate method dispatch using function arity -add doOnCompleted and doOnError methods instead of different doOnEach overloads [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Separating unit tests out and update the comments 	Separating unit tests out and update the comments [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Don't emit null onComplete when no onNext received 	Don't emit null onComplete when no onNext received [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Add and clarify unit tests in map 	Add and clarify unit tests in map [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Separating unit tests out due to https://github.com/Netflix/RxJava/pull/466 	Separating unit tests out due to https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /466 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move last 6 remaining unit tests out. 	Move last 6 remaining unit tests out .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	moving tests to test source folder #439 	moving tests to test source[-2]folder #439 [sentence: 1,-2] [result: max + and - of any sentence]
1	-2	creating test classes on test source folder 	creating test classes on test source[-2]folder [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Singularize AndroidObservables, move to observables package 	Singularize AndroidObservables ,move to observables package [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Force 'hasNext' and 'next' throw the error once they have already thrown it before 	Force[-2]'hasNext 'and 'next 'throw the error[-2]once they have already thrown it before [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Followed the iterator contract 	Followed the iterator contract [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Drop use of WeakReferences and use a custom subscription instead 	Drop[-2]use of WeakReferences[-2]and use a custom subscription instead [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Combine RefCountTest and RefCountTests 	Combine RefCountTest and RefCountTests [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Removed static variant of refCount 	Removed static[-2]variant of refCount [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	move MovieLibUsage.java from project rxjava-scala-java to project rxjava-scala and delete project rxjava-scala-java 	move MovieLibUsage .[sentence: 1,-1] java from project rxjava -scala -java to project rxjava -scala and delete project rxjava -scala -java [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Change 'any' to 'isEmpty'/'exists' 	Change 'any 'to 'isEmpty '/'exists '[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	refactor package structure package object scala and package scala now can coexist 	refactor package structure package object scala and package scala now can coexist [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Merge and work on RefCount 	Merge and work on RefCount [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Merge and work on RefCount 	Merge and work on RefCount [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Use 'debounce' as proper name for ThrottleWithTimeout which unfortunately is the poorly named Rx Throttle operator. http://drupalmotion.com/article/debounce-and-throttle-visual-explanation Debounce: Think of it as "grouping multiple events in one". Imagine that you go home, enter in the elevator, doors are closing... and suddenly your neighbor appears in the hall and tries to jump on the elevator. Be polite! and open the doors for him: you are debouncing the elevator departure. Consider that the same situation can happen again with a third person, and so on... probably delaying the departure several minutes. Throttle: Think of it as a valve, it regulates the flow of the executions. We can determine the maximum number of times a function can be called in certain time. So in the elevator analogy.. you are polite enough to let people in for 10 secs, but once that delay passes, you must go! http://unscriptable.com/2009/03/20/debouncing-javascript-methods/ http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/ 	Use 'debounce 'as proper name for ThrottleWithTimeout which unfortunately[-2]is the poorly[-2]named Rx Throttle operator .[sentence: 1,-2] http ://drupalmotion .[sentence: 1,-1] com /article /debounce -and -throttle -visual -explanation Debounce :Think of it as 'grouping multiple events in one '.[sentence: 1,-1] Imagine that you go home ,enter in the elevator ,doors are closing ...[sentence: 1,-1] and suddenly your neighbor appears in the hall and tries to jump on the elevator .[sentence: 1,-1] Be polite ![+0.6 punctuation mood emphasis][sentence: 2,-1] and open the doors for him :you are debouncing the elevator departure .[sentence: 1,-1] Consider that the same situation can happen again with a third person ,and so on ...[sentence: 1,-1] probably delaying the departure several minutes .[sentence: 1,-1] Throttle :Think of it as a valve ,it regulates the flow of the executions .[sentence: 1,-1] We can determine the maximum number of times a function can be called in certain time .[sentence: 1,-1] So in the elevator analogy ..[sentence: 1,-1] you are polite enough to let people in for 10 secs ,but once that delay[-2]passes ,you must go ![+0.6 punctuation mood emphasis][sentence: 2,-2] http ://unscriptable .[sentence: 1,-1] com /2009 /03 /20 /debouncing -javascript -methods /http ://www .[sentence: 1,-1] illyriad .[sentence: 1,-1] co .[sentence: 1,-1] uk /blog /index .[sentence: 1,-1] php /2011 /09 /javascript -dont -spam[-2][=0 negation]-your -server -debounce -and -throttle /[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	unit tests for covariance - refactoring so not everything for the entire Observable ends up in a single class 	unit tests for covariance -refactoring so not everything for the entire Observable ends up in a single class [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Merge window operator commit to master This is from commit http://github.com/RallySoftware/RxJava/commit/71335e4ed1531b1542c7b304a6d3337145e0b2df 	Merge window operator commit to master This is from commit http ://github .[sentence: 1,-1] com /RallySoftware /RxJava /commit /71335e4ed1531b1542c7b304a6d3337145e0b2df [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	SwitchDo - remove instance method - rename to switchOnNext (leaving behind deprecated switchDo for now) See https://github.com/Netflix/RxJava/issues/342 	SwitchDo -remove instance method -rename to switchOnNext (leaving behind deprecated switchDo for now )See https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /342 [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	BlockingObservable Refactor No longer extends from Observable. If someone chooses to use BlockingObservable the intent is to leave the Observable so it shouldn't show the non-blocking operators. Remove duplicate static methods, similar to how done on Observable in earlier commit. 	BlockingObservable[-2]Refactor No longer extends from Observable .[sentence: 1,-2] If someone chooses to use BlockingObservable[-2]the intent is to leave the Observable so it shouldn't show the non -blocking[-2]operators .[sentence: 1,-2] Remove duplicate static[-2]methods ,similar to how done on Observable in earlier commit .[sentence: 1,-2] [result: max + and - of any sentence]
1	-2	Remove unnecessary Observable constructor - fixed unit tests that relied on it 	Remove unnecessary[-2]Observable constructor -fixed unit tests that relied on it [sentence: 1,-2] [result: max + and - of any sentence]
1	-2	Change OnSubscribeFunc.call to OnSubscribeFunc.onSubscribe Avoid name collions for `call` method with Func* interfaces to simplify interop with Clojure etc. 	Change OnSubscribeFunc .[sentence: 1,-1] call to OnSubscribeFunc .[sentence: 1,-1] onSubscribe Avoid[-2]name collions for `call `method with Func *interfaces to simplify interop with Clojure etc .[sentence: 1,-2] [result: max + and - of any sentence]
3	-2	Make DummyObservable visible to clojureTest classpath. RxJava issue #327. Moved DummyObservable into main so that it's compiled and available when the clojureTest task executes. Perhaps someone with stronger Gradle skills can figure out how to put this Java class in src/test and get things to work out. Correctly. For the time being, several clean/build cycles worked fine for me. 	Make DummyObservable visible to clojureTest classpath .[sentence: 1,-1] RxJava issue #327 .[sentence: 1,-1] Moved DummyObservable into main so that it's compiled and available when the clojureTest task executes[-2].[sentence: 1,-2] Perhaps someone with stronger Gradle skills can figure out how to put this Java class in src /test and get things to work out .[sentence: 1,-1] Correctly .[sentence: 1,-1] For the time being ,several clean /build cycles worked fine[3]for me .[sentence: 3,-1] [result: max + and - of any sentence]
1	-1	Move Observable UnitTests The Observable class is huge by nature as it is the facade for all operators. Due to this it represents all functionality and should not have it's tests inside it. They are moved to /src/test/ so as to allow breaking them up into lots of individual classes. 	Move Observable UnitTests The Observable class is huge by nature as it is the facade for all operators .[sentence: 1,-1] Due to this it represents all functionality and should not have it's tests inside it .[sentence: 1,-1] They are moved to /src /test /so as to allow breaking them up into lots of individual classes .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Observable API reduction - remove static methods that are not entry points (creators or combinatorial) - remove deprecated methods This change was done to: - Reduce the footprint of the API - Clarify the API so instance methods are preferred unless the static method is appropriate as an entry point - Remove duplicate method signatures (such as a buffer method) where the only difference was one was static. This actually causes issues at the bytecode level with dynamic languages since the only difference between them is a modifier making one of them static. Some dynamic languages have a hard time choosing between the two methods when both have the same signature. 	Observable API reduction -remove static[-2]methods that are not entry points (creators or combinatorial )-remove deprecated methods This change was done to :-Reduce the footprint of the API -Clarify the API so instance methods are preferred unless the static[-2]method is appropriate as an entry point -Remove duplicate method signatures (such as a buffer method )where the only difference was one was static[-2].[sentence: 1,-2] This actually causes issues at the bytecode level with dynamic[2]languages since the only difference between them is a modifier making one of them static[-2].[sentence: 2,-2] Some dynamic[2][+-1 booster word]languages have a hard time choosing between the two methods when both have the same signature .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Action interfacesAction Marker Interface 	Action interfacesAction Marker Interface [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Removed the exclude from the javadoc task as it was breaking javadoc generation from the projects root folder 	Removed the exclude[-2]from the javadoc task as it was breaking javadoc generation from the projects root folder [sentence: 1,-2] [result: max + and - of any sentence]
2	-2	Moved sources under main android package. Excluded the test support package from being included when building a jar or generating javadoc Javadoc comments added 	Moved sources[-2]under main android package .[sentence: 1,-2] Excluded the test support[2]package from being included when building a jar or generating javadoc Javadoc comments added [sentence: 2,-1] [result: max + and - of any sentence]
2	-2	Reduce duplication by making "schedule now" the special case Forwards to "schedule later" with delay of 0 now. 	Reduce duplication by making 'schedule now 'the special[2]case Forwards to 'schedule later 'with delay[-2]of 0 now .[sentence: 2,-2] [result: max + and - of any sentence]
1	-1	Remove thread.sleep from unit test to speed it up .. and apparently formatting and imports changed a bunch ... 	Remove thread .[sentence: 1,-1] sleep from unit test to speed it up ..[sentence: 1,-1] and apparently formatting and imports changed a bunch ...[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Change hasException to hasThrowable 	Change hasException to hasThrowable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Change onError(Exception) to onError(Throwable) See issue "Observer#onError should use Throwable" for background => https://github.com/Netflix/RxJava/issues/296 	Change onError (Exception )to onError (Throwable )See issue 'Observer #onError should use Throwable 'for background =>https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /296 [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Rename AtomicObserver to SafeObserver Rename to be more descriptive of what it has evolved to. 	Rename AtomicObserver to SafeObserver[2]Rename to be more descriptive of what it has evolved to .[sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Added JavaDoc and moved public helper classes of OperationBuffer class to rx.util package. 	Added JavaDoc and moved public helper classes of OperationBuffer class to rx .[sentence: 1,-1] util package .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move forEach to BlockingObservable - was missed in previous refactoring 	Move forEach to BlockingObservable[-2]-was missed[-2]in previous refactoring [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Switch operator should now propagate onError in subsequences. 	Switch operator should now propagate onError in subsequences .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Move blocking operators to BlockingObservable - see https://github.com/Netflix/RxJava/issues/270 for background 	Move blocking[-2]operators to BlockingObservable[-2]-see https ://github .[sentence: 1,-2] com /Netflix /RxJava /issues /270 for background [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Moving "implementation detail" classes out of public API 	Moving 'implementation detail 'classes out of public API [sentence: 1,-1] [result: max + and - of any sentence]
3	-1	fixed method signatures and respective javadocs of various aggregate/reduce/scan overloads 	fixed method signatures and respective[3]javadocs of various aggregate /reduce /scan overloads [sentence: 3,-1] [result: max + and - of any sentence]
1	-1	Renamed `extensions` to `rxjava-contrib`. 	Renamed `extensions `to `rxjava -contrib `.[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Created `extensions` subdirectory for non-core additions to RxJava and moved `SwingScheduler` into a new subproject `rxjava-swing`. 	Created `extensions `subdirectory for non -core additions to RxJava and moved `SwingScheduler `into a new subproject `rxjava -swing `.[sentence: 1,-1] [result: max + and - of any sentence]
3	-2	Added tests against periodic scheduling. I hope the delays are stable yet fast enough... 	Added tests against[-2]periodic scheduling .[sentence: 1,-2] I hope[3]the delays are stable[-2]yet fast enough ...[sentence: 3,-2] [result: max + and - of any sentence]
1	-1	Implemented periodic scheduling, too. Needs testing now. 	Implemented periodic scheduling ,too .[sentence: 1,-1] Needs testing now .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Merge branch 'master' into multisubscribe Conflicts: rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java 	Merge branch 'master 'into multisubscribe Conflicts[-2]:rxjava -core /src /main /java /rx /operators /OperatorGroupBy .[sentence: 1,-2] java [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename from Operator* to Operation* to match convention 	Rename from Operator *to Operation *to match convention [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename DefaultSubject to PublishSubject - https://github.com/Netflix/RxJava/issues/242 	Rename DefaultSubject to PublishSubject -https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /242 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Merge Scheduler/AbstractScheduler - using abstract class for Scheduler for same reason Observable is concrete - discussed and decided upon at https://github.com/Netflix/RxJava/pull/235 	Merge Scheduler /AbstractScheduler -using abstract class for Scheduler for same reason Observable is concrete -discussed and decided upon at https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /235 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Change Scheduler implementations to use primary methods Work done in https://github.com/Netflix/RxJava/pull/229 added the following methods: - Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit)} - Subscription schedule(T state, Func2<Scheduler, T, Subscription> action)} These are in fact the primary methods from RxNet (http://msdn.microsoft.com/en-us/library/hh211963(v=vs.103).aspx) and the others are just helper overloads. It seems it is better to set the precedent to use these 2 methods for actual implementation logic while all other methods are just decorating and forwarding from AbstractScheduler to these methods. I have updated the various implementations to achieve this. Unit tests are passing … but we don't have enough unit test coverage so I won't be surprised if bugs are found. 	Change Scheduler implementations to use primary methods Work done in https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /229 added the following methods :-Subscription schedule (T state ,Func2 <Scheduler ,T ,Subscription >action ,long delayTime ,TimeUnit unit )}-Subscription schedule (T state ,Func2 <Scheduler ,T ,Subscription >action )}These are in fact the primary methods from RxNet (http ://msdn .[sentence: 1,-1] microsoft .[sentence: 1,-1] com /en -us /library /hh211963 (v =vs .[sentence: 1,-1] 103 ).[sentence: 1,-1] aspx )and the others are just helper overloads .[sentence: 1,-1] It seems it is better to set the precedent to use these 2 methods for actual implementation logic while all other methods are just decorating and forwarding from AbstractScheduler to these methods .[sentence: 1,-1] I have updated the various implementations to achieve this .[sentence: 1,-1] Unit tests are passing …but we don't have enough unit test coverage so I won't be surprised if bugs are found .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Non-blocking implementation of ScheduledObserver 	Non -blocking[-2]implementation of ScheduledObserver [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Corrected naming Operator -> Operation 	Corrected naming Operator ->Operation [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Moved state to Observer from Observable 	Moved state to Observer from Observable [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Multicast implemented 	Multicast implemented [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Playing with Subject and ConnectedObservable 	Playing[2]with Subject and ConnectedObservable [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	initial attempt at implementing periodic schedulers as discussed in #228, needs some testing next... 	initial attempt at implementing periodic schedulers as discussed in #228 ,needs some testing next ...[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Switched sample from internal clock to using the interval operator 	Switched sample from internal clock to using the interval operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Oops, the test scheduler has to go into the main sources. 	Oops ,the test scheduler has to go into the main sources[-2].[sentence: 1,-2] [result: max + and - of any sentence]
2	-1	Tweaks to Executor/ExecutorScheduler/IOScheduler and Javadocs - added Javadocs - moved some classes to package-private until they are proven necessary for the public API - made ExecutorScheduler support Executor implementations and still work with time delays by using a system-wide scheduler/timer - made IO thread-pool unbounded with a cached thread pool 	Tweaks to Executor /ExecutorScheduler /IOScheduler and Javadocs -added Javadocs -moved some classes to package -private until they are proven necessary for the public API -made ExecutorScheduler support[2]Executor implementations and still work with time delays by using a system -wide scheduler /timer -made IO thread -pool unbounded with a cached thread pool [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Make ForwardingScheduler Internal Until there is a use case other than unit testing I'm moving this to a non-public role so it's not part of the public API. 	Make ForwardingScheduler Internal Until there is a use case other than unit testing I'm moving this to a non -public role so it's not part of the public API .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Keeping ScheduledObserver out of public API For now keeping ScheduledObserver an implementation detail until it's clear we want it part of the long-term public API. 	Keeping ScheduledObserver out of public API For now keeping ScheduledObserver an implementation detail until it's clear we want it part of the long -term public API .[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	RxJavaObservableExecutionHook Allow a plugin to intercept invocations of an Observable via its subscribe method. Use cases: - extra logging or metrics for start, return and error events when subscribing - decorate (or replace) an 'onSubscribe' function with additional behavior - decorate an Exception - decorate a Subscription This is modeled after Hystrix Plugins: http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/executionhook/HystrixCommandExecutionHook.html Javadocs will be at http://netflix.github.com/RxJava/javadoc/ 	RxJavaObservableExecutionHook Allow a plugin to intercept invocations of an Observable via its subscribe method .[sentence: 1,-1] Use cases :-extra logging or metrics for start ,return and error[-2]events when subscribing -decorate (or replace )an 'onSubscribe 'function with additional behavior -decorate an Exception -decorate a Subscription This is modeled after Hystrix Plugins :http ://netflix .[sentence: 1,-2] github .[sentence: 1,-1] com /Hystrix /javadoc /index .[sentence: 1,-1] html ?[sentence: 1,-1] com /netflix /hystrix /strategy /executionhook /HystrixCommandExecutionHook .[sentence: 1,-1] html Javadocs will be at http ://netflix .[sentence: 1,-1] github .[sentence: 1,-1] com /RxJava /javadoc /[sentence: 1,-1] [result: max + and - of any sentence]
1	-2	1. Update javadoc on subscribe() blocking if observables are running on the same thread. 2. Add test case with infinity observable. 3. Add test case to unsubscribe() with all observables running in different thread (non-blocking). 	1 .[sentence: 1,-1] Update javadoc on subscribe ()blocking[-2]if observables are running on the same thread .[sentence: 1,-2] 2 .[sentence: 1,-1] Add test case with infinity observable .[sentence: 1,-1] 3 .[sentence: 1,-1] Add test case to unsubscribe ()with all observables running in different thread (non -blocking[-2]).[sentence: 1,-2] [result: max + and - of any sentence]
1	-1	Removed SleepingAction from Abstract scheduler. ExecutorScheduler throws exception for the delayed action. 	Removed SleepingAction from Abstract scheduler .[sentence: 1,-1] ExecutorScheduler throws exception for the delayed action .[sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Improve error handling of user provided Observers https://github.com/Netflix/RxJava/issues/216 	Improve[2]error[-2]handling of user provided Observers https ://github .[sentence: 2,-2] com /Netflix /RxJava /issues /216 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Extract UnsubscribeTester to top level 	Extract UnsubscribeTester to top level [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Small reorganization of code for OperationTake and TrustedObservableTester - removed rx.testing package (if that's going to exist that means it's bleeding into something that should live in /src/test and beyond what works well for inner class testing) - made TrustedObservableTester part of rx.operation package and an inner UnitTest class so it doesn't become part of the public API 	Small reorganization of code for OperationTake and TrustedObservableTester[2]-removed rx .[sentence: 2,-1] testing package (if that's going to exist that means it's bleeding into something that should live in /src /test and beyond what works well for inner class testing )-made TrustedObservableTester[2]part of rx .[sentence: 2,-1] operation package and an inner UnitTest class so it doesn't become part of the public API [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Introduce Subject as analogue to RX ISubject 	Introduce Subject as analogue to RX ISubject [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename Subject to PublishSubject 	Rename Subject to PublishSubject [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Incorporate review suggestions. - Changes finally0 to finallyDo. - Removes unnecessary subscription-wrapping. - Handle exceptions in onCompleted/onError 	Incorporate review suggestions .[sentence: 1,-1] -Changes finally0 to finallyDo .[sentence: 1,-1] -Removes unnecessary[-2]subscription -wrapping .[sentence: 1,-2] -Handle exceptions in onCompleted /onError [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Split Take and TakeWhile 	Split Take and TakeWhile [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	renamed tests 	renamed tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	More tests 	More tests [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Subscriptions cleanup - make createSubscription be create … as I had originally intended to do but forgot to - make EmptySubscription a singleton 	Subscriptions cleanup -make createSubscription be create …as I had originally intended to do but forgot to -make EmptySubscription a singleton [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Subscriptions utility class and rx.subscriptions package https://github.com/Netflix/RxJava/issues/173 	Subscriptions utility class and rx .[sentence: 1,-1] subscriptions package https ://github .[sentence: 1,-1] com /Netflix /RxJava /issues /173 [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Move GroupedObservable to rx.observables 	Move GroupedObservable to rx .[sentence: 1,-1] observables [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Implemented GetIterator operation 	Implemented GetIterator operation [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactored TakeUntil operator 	Refactored TakeUntil operator [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Updated single/singleOrDefault according to review request 	Updated single /singleOrDefault according to review request [sentence: 1,-1] [result: max + and - of any sentence]
1	-2	Static method plus javadoc 	Static[-2]method plus javadoc [sentence: 1,-2] [result: max + and - of any sentence]
1	-1	forEach with Action1 but not Observer I re-read the MSDN docs and found the previous implementation wasn't complying with the contract. http://msdn.microsoft.com/en-us/library/hh211815(v=vs.103).aspx I believe this now does. 	forEach with Action1 but not Observer I re -read the MSDN docs and found the previous implementation wasn't complying with the contract .[sentence: 1,-1] http ://msdn .[sentence: 1,-1] microsoft .[sentence: 1,-1] com /en -us /library /hh211815 (v =vs .[sentence: 1,-1] 103 ).[sentence: 1,-1] aspx I believe this now does .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	merge Operator TakeWhile pull request This is a manual merge of https://github.com/Netflix/RxJava/pull/125 contributed by @mairbek 	merge Operator TakeWhile pull request This is a manual merge of https ://github .[sentence: 1,-1] com /Netflix /RxJava /pull /125 contributed by @mairbek [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Renamed takeWhile with Func2 parameter to takeWhileWithIndex Added takeWhile and takeWhileWithIndex methods to Observable 	Renamed takeWhile with Func2 parameter to takeWhileWithIndex Added takeWhile and takeWhileWithIndex methods to Observable [sentence: 1,-1] [result: max + and - of any sentence]
2	-1	TakeWhile support for predicate with index 	TakeWhile support[2]for predicate with index [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	Basic take-while implementation 	Basic take -while implementation [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	removing .observables package so main classes are just rx.* 	removing .[sentence: 1,-1] observables package so main classes are just rx .*[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	synchronization and contract refactoring No longer will synchronization ever be added automatically. If synchronization is needed then the synchronize() operator should be used. The AtomicObserver is added to Observables (but not internally trusted ones) to ensure compliance with the Rx contract and auto-unsubscribe. This should generally mean just 1 wrapper at the top of a sequence chain. These changes are based on a discussion with Erik about how Rx 2.0 works in .Net. 	synchronization and contract refactoring No longer will synchronization ever be added automatically .[sentence: 1,-1] If synchronization is needed then the synchronize ()operator should be used .[sentence: 1,-1] The AtomicObserver is added to Observables (but not internally trusted[2]ones )to ensure compliance with the Rx contract and auto -unsubscribe .[sentence: 2,-1] This should generally mean just 1 wrapper at the top of a sequence chain .[sentence: 1,-1] These changes are based on a discussion with Erik about how Rx 2 .[sentence: 1,-1] 0 works in .[sentence: 1,-1] Net .[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Change NullObservableSubscription to NoOpObservableSubscription Gives stacktraces that make more sense as "null" has nothing to do with it. 	Change NullObservableSubscription to NoOpObservableSubscription Gives stacktraces that make more sense as 'null 'has nothing to do with it .[sentence: 1,-1] [result: max + and - of any sentence]
2	-1	Performance refactoring: OperatorSubscribeFunction - migrated Func1 to OperatorSubscribeFunction for internal operator implementations - do not wrap with AtomicObserver when it's a trusted operator https://github.com/Netflix/RxJava/issues/104 	Performance refactoring :OperatorSubscribeFunction -migrated Func1 to OperatorSubscribeFunction for internal operator implementations -do not wrap with AtomicObserver when it's a trusted[2]operator https ://github .[sentence: 2,-1] com /Netflix /RxJava /issues /104 [sentence: 1,-1] [result: max + and - of any sentence]
2	-2	Refactoring towards performance improvements - Convert operators to implement Func1 instead of extend Observable - Change Observable to concete instead of abstract - subscribe is now controlled by the concrete class so we can control the wrapping of a Func to be executed when subscribe is called - removed most wrapping inside operators with AtomicObservable except for complex operators like Zip that appear to still need it While doing these changes the util/function packages got moved a little as well to make more sense for where the Atomic* classes should go 	Refactoring towards performance improvements[2]-Convert operators to implement Func1 instead of extend Observable -Change Observable to concete instead of abstract -subscribe is now controlled by the concrete class so we can control the wrapping of a Func to be executed[-2]when subscribe is called -removed most wrapping inside operators with AtomicObservable except for complex operators like[2]Zip that appear to still need it While doing these changes the util /function packages got moved a little as well to make more sense for where the Atomic *classes should go [sentence: 2,-2] [result: max + and - of any sentence]
2	-1	Performance optimizations for dynamic function execution. - memoize dynamic function constructions so executions are statically typed after a single dynamic lookup instead of dynamic on every execution 	Performance optimizations for dynamic[2]function execution .[sentence: 2,-1] -memoize dynamic[2]function constructions so executions are statically typed after a single dynamic[2]lookup instead of dynamic[2]on every execution [sentence: 2,-1] [result: max + and - of any sentence]
1	-1	update language adaptors to rx.* package 	update language adaptors to rx .*[sentence: 1,-1] package [sentence: 1,-1] [result: max + and - of any sentence]
1	-1	changing package to rx.* 	changing package to rx .*[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Refactoring for consistent implementation approach. Combined ObservableExtensions into Observable to match how Rx works (Observable.* methods) 	Refactoring for consistent implementation approach .[sentence: 1,-1] Combined ObservableExtensions into Observable to match how Rx works (Observable .*[sentence: 1,-1] methods )[sentence: 1,-1] [result: max + and - of any sentence]
1	-1	Rename to Observer/Observable Observable is now a concrete abstract class rather than an interface with 1:1 relationship to a concrete class. 	Rename to Observer /Observable Observable is now a concrete abstract class rather than an interface with 1 :1 relationship to a concrete class .[sentence: 1,-1] [result: max + and - of any sentence]
